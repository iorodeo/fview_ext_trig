
camtrig-teensypp-2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001a20  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000017f6  00800114  00800114  00001ac8  2**0
                  ALLOC
  3 .stab         00001968  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cbc  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  000040ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000929  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039e3  00000000  00000000  00004d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014f8  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000313d  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000460  00000000  00000000  0000cd50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001687  00000000  00000000  0000d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001280  00000000  00000000  0000e837  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000338  00000000  00000000  0000fab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    OCR3B = 0x1770;
  }
  update_pulse_buf(rand_pulse_width);
}

void update_pulse_buf(uint8_t pulse_width) {
       0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
		Endpoint_DisableEndpoint();
	}
}

uint8_t Endpoint_WaitUntilReady(void)
{
       2:	00 00       	nop
       4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
       6:	00 00       	nop
       8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
       a:	00 00       	nop
       c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
       e:	00 00       	nop
      10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
      12:	00 00       	nop
      14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
      16:	00 00       	nop
      18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
      22:	00 00       	nop
      24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_10>
      2c:	c0 c0       	rjmp	.+384    	; 0x1ae <__bad_interrupt>
      2e:	00 00       	nop
      30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
      36:	00 00       	nop
      38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
      42:	00 00       	nop
      44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
      46:	00 00       	nop
      48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
      52:	00 00       	nop
      54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
      56:	00 00       	nop
      58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
      62:	00 00       	nop
      64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
      66:	00 00       	nop
      68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
      72:	00 00       	nop
      74:	ce c4       	rjmp	.+2460   	; 0xa12 <__vector_29>
      76:	00 00       	nop
      78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	d1 c0       	rjmp	.+418    	; 0x224 <__vector_32>
      82:	00 00       	nop
      84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
      86:	00 00       	nop
      88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd c5       	rjmp	.+2970   	; 0xc28 <__vector_35>
      8e:	00 00       	nop
      90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
      92:	00 00       	nop
      94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 00 02 00 00 00 08 81 17 af 0b 00 00 01 02     ................
      a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 27 00 01 01 00 c0 fa 09 04 00 00 03 ff ff     ..'.............
      ba:	ff 00 07 05 06 02 10 00 00 07 05 82 02 10 00 00     ................
      ca:	07 05 83 02 40 00 00                                ....@..

000000d1 <LanguageString>:
      d1:	04 03 09 04                                         ....

000000d5 <ManufacturerString>:
      d5:	12 03 53 00 74 00 72 00 61 00 77 00 6d 00 61 00     ..S.t.r.a.w.m.a.
      e5:	6e 00 00 00                                         n...

000000e9 <ProductString>:
      e9:	52 03 43 00 61 00 6d 00 65 00 72 00 61 00 20 00     R.C.a.m.e.r.a. .
      f9:	54 00 72 00 69 00 67 00 67 00 65 00 72 00 20 00     T.r.i.g.g.e.r. .
     109:	31 00 2e 00 30 00 31 00 20 00 28 00 46 00 5f 00     1...0.1. .(.F._.
     119:	43 00 50 00 55 00 20 00 3d 00 20 00 31 00 36 00     C.P.U. .=. .1.6.
     129:	30 00 30 00 30 00 30 00 30 00 30 00 55 00 4c 00     0.0.0.0.0.0.U.L.
     139:	29 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00     ). . . . . . . .
     149:	20 00 20 00 20 00 20 00 20 00 20 00 20 00 20 00      . . . . . . . .
     159:	00 00                                               ..

0000015b <__c.1755>:
     15b:	45 46 47 65 66 67 00                                EFGefg.

00000162 <__c.1749>:
     162:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000172 <__ctors_end>:
     172:	11 24       	eor	r1, r1
     174:	1f be       	out	0x3f, r1	; 63
     176:	cf ef       	ldi	r28, 0xFF	; 255
     178:	d0 e2       	ldi	r29, 0x20	; 32
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
     17e:	11 e0       	ldi	r17, 0x01	; 1
     180:	a0 e0       	ldi	r26, 0x00	; 0
     182:	b1 e0       	ldi	r27, 0x01	; 1
     184:	e0 e2       	ldi	r30, 0x20	; 32
     186:	fa e1       	ldi	r31, 0x1A	; 26
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	0b bf       	out	0x3b, r16	; 59
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
     18e:	07 90       	elpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 31       	cpi	r26, 0x14	; 20
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
     198:	19 e1       	ldi	r17, 0x19	; 25
     19a:	a4 e1       	ldi	r26, 0x14	; 20
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	aa 30       	cpi	r26, 0x0A	; 10
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	ec d3       	rcall	.+2008   	; 0x982 <main>
     1aa:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <_exit>

000001ae <__bad_interrupt>:
     1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <PWM_Init>:
WGMn3:0 = 14

*/

  // set output direction on pin
  PORTC &= 0x87; // pin C3-6 set low to start
     1b0:	88 b1       	in	r24, 0x08	; 8
     1b2:	87 78       	andi	r24, 0x87	; 135
     1b4:	88 b9       	out	0x08, r24	; 8
  //DDRC |= 0xFF; // enable output for all PORTC

  // //////////////////////////////////////////////////////////////////////////
  // WBD - only enable pins on PORT C that are required 
  DDRC = 0b01001000;  // Enables pins for OCR3A, port C external triggers disabled 
     1b6:	88 e4       	ldi	r24, 0x48	; 72
     1b8:	87 b9       	out	0x07, r24	; 7

  // Note, intially we may want OCR3B  disabled - and enable for triger.

  DDRB = 0b01100000;  // Enbles pins for OCR1A  and OCR2A
     1ba:	80 e6       	ldi	r24, 0x60	; 96
     1bc:	84 b9       	out	0x04, r24	; 4

  //// Set up timer 1
  ICR1 = TIMER1_TOP;  // Timer 1 top
     1be:	84 ef       	ldi	r24, 0xF4	; 244
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	90 93 87 00 	sts	0x0087, r25
     1c6:	80 93 86 00 	sts	0x0086, r24
  TCCR1A = 0b10101010;
     1ca:	2a ea       	ldi	r18, 0xAA	; 170
     1cc:	20 93 80 00 	sts	0x0080, r18
  TCCR1B = 0b00011001;
     1d0:	89 e1       	ldi	r24, 0x19	; 25
     1d2:	80 93 81 00 	sts	0x0081, r24

  // Set PWM values to zero initially
  OCR1A = 0;
     1d6:	10 92 89 00 	sts	0x0089, r1
     1da:	10 92 88 00 	sts	0x0088, r1
  OCR1B = 0;
     1de:	10 92 8b 00 	sts	0x008B, r1
     1e2:	10 92 8a 00 	sts	0x008A, r1

  /////////////////////////////////////////////////////////////////////////////

  // Set output compare to mid-point
  OCR3A = 0x03e8;
     1e6:	88 ee       	ldi	r24, 0xE8	; 232
     1e8:	93 e0       	ldi	r25, 0x03	; 3
     1ea:	90 93 99 00 	sts	0x0099, r25
     1ee:	80 93 98 00 	sts	0x0098, r24
  OCR3B = 0x0;
     1f2:	10 92 9b 00 	sts	0x009B, r1
     1f6:	10 92 9a 00 	sts	0x009A, r1
  OCR3C = 0x0;
     1fa:	10 92 9d 00 	sts	0x009D, r1
     1fe:	10 92 9c 00 	sts	0x009C, r1

  // Set TOP to 500 (if F_CLOCK = 1MHZ, this is 200 Hz)
  //ICR3= 5000;
  ICR3 = 0x2710;
     202:	80 e1       	ldi	r24, 0x10	; 16
     204:	97 e2       	ldi	r25, 0x27	; 39
     206:	90 93 97 00 	sts	0x0097, r25
     20a:	80 93 96 00 	sts	0x0096, r24
  // set Compare Output Mode for Fast PWM
  // COM3A1:0 = 1,0 clear OC3A on compare match
  // COM3B1:0 = 1,0 clear OC3B on compare match
  // COM3C1:0 = 1,0 clear OC3C on compare match
  // WGM31, WGM30 = 1,0
  TCCR3A = 0xAA;
     20e:	20 93 90 00 	sts	0x0090, r18
  // ---- set TCCR3B ----------
  // high bits = 0,0,0
  //WGM33, WGM32 = 1,1
  // CS1 = 0,0,1 (starts timer1) (clock select)
  // CS1 = 0,1,0 (starts timer1 CS=8) (clock select)
  TCCR3B = 0x1A;
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	80 93 91 00 	sts	0x0091, r24

  // really only care about timer3_compa_vect
  //TIMSK3 = (1 << OCIE3B) | (1 << OCIE3A) | (1 << TOIE3);
  TIMSK3 |= (1 << OCIE3A);
     218:	e1 e7       	ldi	r30, 0x71	; 113
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	82 60       	ori	r24, 0x02	; 2
     220:	80 83       	st	Z, r24
}
     222:	08 95       	ret

00000224 <__vector_32>:

}

/* ISR for the timer 3 compare vector. */
ISR(TIMER3_COMPA_vect, ISR_BLOCK)
{
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	2f 93       	push	r18
     230:	8f 93       	push	r24
     232:	9f 93       	push	r25
     234:	af 93       	push	r26
     236:	bf 93       	push	r27
  //reads/writes globals: trig_once_mode, framecount_A, epoch

  if (trig_once_mode) {
     238:	80 91 15 01 	lds	r24, 0x0115
     23c:	88 23       	and	r24, r24
     23e:	39 f0       	breq	.+14     	; 0x24e <__vector_32+0x2a>

    TCCR3B = (TCCR3B & 0xF8) | (0 & 0x07); // low 3 bits sets CS to 0 (stop)
     240:	80 91 91 00 	lds	r24, 0x0091
     244:	88 7f       	andi	r24, 0xF8	; 248
     246:	80 93 91 00 	sts	0x0091, r24

    trig_once_mode=0;
     24a:	10 92 15 01 	sts	0x0115, r1
  }
  if ((framecount_A)!=0xFFFFFFFF) {
     24e:	80 91 1b 01 	lds	r24, 0x011B
     252:	90 91 1c 01 	lds	r25, 0x011C
     256:	a0 91 1d 01 	lds	r26, 0x011D
     25a:	b0 91 1e 01 	lds	r27, 0x011E
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	af 4f       	sbci	r26, 0xFF	; 255
     264:	bf 4f       	sbci	r27, 0xFF	; 255
     266:	a1 f0       	breq	.+40     	; 0x290 <__vector_32+0x6c>
    framecount_A++;
     268:	80 91 1b 01 	lds	r24, 0x011B
     26c:	90 91 1c 01 	lds	r25, 0x011C
     270:	a0 91 1d 01 	lds	r26, 0x011D
     274:	b0 91 1e 01 	lds	r27, 0x011E
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	a1 1d       	adc	r26, r1
     27c:	b1 1d       	adc	r27, r1
     27e:	80 93 1b 01 	sts	0x011B, r24
     282:	90 93 1c 01 	sts	0x011C, r25
     286:	a0 93 1d 01 	sts	0x011D, r26
     28a:	b0 93 1e 01 	sts	0x011E, r27
     28e:	38 c0       	rjmp	.+112    	; 0x300 <__vector_32+0xdc>
  } else {
    // Wrap framecount to zero. This code won't be called very often.
    framecount_A++;
     290:	80 91 1b 01 	lds	r24, 0x011B
     294:	90 91 1c 01 	lds	r25, 0x011C
     298:	a0 91 1d 01 	lds	r26, 0x011D
     29c:	b0 91 1e 01 	lds	r27, 0x011E
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 1b 01 	sts	0x011B, r24
     2aa:	90 93 1c 01 	sts	0x011C, r25
     2ae:	a0 93 1d 01 	sts	0x011D, r26
     2b2:	b0 93 1e 01 	sts	0x011E, r27
    epoch++;
     2b6:	80 91 1f 01 	lds	r24, 0x011F
     2ba:	90 91 20 01 	lds	r25, 0x0120
     2be:	a0 91 21 01 	lds	r26, 0x0121
     2c2:	b0 91 22 01 	lds	r27, 0x0122
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	a1 1d       	adc	r26, r1
     2ca:	b1 1d       	adc	r27, r1
     2cc:	80 93 1f 01 	sts	0x011F, r24
     2d0:	90 93 20 01 	sts	0x0120, r25
     2d4:	a0 93 21 01 	sts	0x0121, r26
     2d8:	b0 93 22 01 	sts	0x0122, r27
    if (epoch>0x7FFFFFFF) {
     2dc:	80 91 1f 01 	lds	r24, 0x011F
     2e0:	90 91 20 01 	lds	r25, 0x0120
     2e4:	a0 91 21 01 	lds	r26, 0x0121
     2e8:	b0 91 22 01 	lds	r27, 0x0122
     2ec:	b7 ff       	sbrs	r27, 7
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <__vector_32+0xdc>
      // Wrap epoch to zero. I guess this code will never be called. :)
      epoch=0;
     2f0:	10 92 1f 01 	sts	0x011F, r1
     2f4:	10 92 20 01 	sts	0x0120, r1
     2f8:	10 92 21 01 	sts	0x0121, r1
     2fc:	10 92 22 01 	sts	0x0122, r1
    }
  }
}
     300:	bf 91       	pop	r27
     302:	af 91       	pop	r26
     304:	9f 91       	pop	r25
     306:	8f 91       	pop	r24
     308:	2f 91       	pop	r18
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <rand_pulse_setvalue>:
  Reg_Handler( rand_pulse_handler, 1, 3, TRUE);
}

void rand_pulse_setvalue(void) {
  // Sets random pulse width value 
  if (rand() < RAND_MAX/2) {
     314:	0e 94 31 0c 	call	0x1862	; 0x1862 <rand>
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	9f 43       	sbci	r25, 0x3F	; 63
     31c:	2c f4       	brge	.+10     	; 0x328 <rand_pulse_setvalue+0x14>
    rand_pulse_width = RAND_PULSE_SHORT;
     31e:	10 92 16 01 	sts	0x0116, r1
    OCR3B = 0x07D0;
     322:	80 ed       	ldi	r24, 0xD0	; 208
     324:	97 e0       	ldi	r25, 0x07	; 7
     326:	05 c0       	rjmp	.+10     	; 0x332 <rand_pulse_setvalue+0x1e>
  }
  else {
    rand_pulse_width = RAND_PULSE_LONG;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 16 01 	sts	0x0116, r24
    OCR3B = 0x1770;
     32e:	80 e7       	ldi	r24, 0x70	; 112
     330:	97 e1       	ldi	r25, 0x17	; 23
     332:	90 93 9b 00 	sts	0x009B, r25
     336:	80 93 9a 00 	sts	0x009A, r24
  }
  update_pulse_buf(rand_pulse_width);
     33a:	90 91 16 01 	lds	r25, 0x0116
}

void update_pulse_buf(uint8_t pulse_width) {
  // Updates the random pulse buffer
  rand_pulse_buf.pos++;
     33e:	80 91 28 01 	lds	r24, 0x0128
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 28 01 	sts	0x0128, r24
  if (rand_pulse_buf.pos >= PULSE_BUF_SZ) {
     348:	80 91 28 01 	lds	r24, 0x0128
     34c:	8a 30       	cpi	r24, 0x0A	; 10
     34e:	10 f0       	brcs	.+4      	; 0x354 <rand_pulse_setvalue+0x40>
    rand_pulse_buf.pos = 0;
     350:	10 92 28 01 	sts	0x0128, r1
  }
  rand_pulse_buf.width[rand_pulse_buf.pos] = pulse_width;
     354:	e0 91 28 01 	lds	r30, 0x0128
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	e8 5d       	subi	r30, 0xD8	; 216
     35c:	fe 4f       	sbci	r31, 0xFE	; 254
     35e:	91 83       	std	Z+1, r25	; 0x01
  rand_pulse_buf.frame[rand_pulse_buf.pos] = framecount_A+2;
     360:	e0 91 28 01 	lds	r30, 0x0128
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	80 91 1b 01 	lds	r24, 0x011B
     36a:	90 91 1c 01 	lds	r25, 0x011C
     36e:	a0 91 1d 01 	lds	r26, 0x011D
     372:	b0 91 1e 01 	lds	r27, 0x011E
     376:	02 96       	adiw	r24, 0x02	; 2
     378:	a1 1d       	adc	r26, r1
     37a:	b1 1d       	adc	r27, r1
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e8 5d       	subi	r30, 0xD8	; 216
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	83 87       	std	Z+11, r24	; 0x0b
     38a:	94 87       	std	Z+12, r25	; 0x0c
     38c:	a5 87       	std	Z+13, r26	; 0x0d
     38e:	b6 87       	std	Z+14, r27	; 0x0e
  else {
    rand_pulse_width = RAND_PULSE_LONG;
    OCR3B = 0x1770;
  }
  update_pulse_buf(rand_pulse_width);
}
     390:	08 95       	ret

00000392 <rand_pulse_handler>:
}

//
// WBD - functions for handling random pulse generation
// ----------------------------------------------------------------------------
void rand_pulse_handler(void) {
     392:	0f 93       	push	r16
  // Reg handler function for random pulse generation
  rand_pulse_setvalue();
     394:	bf df       	rcall	.-130    	; 0x314 <rand_pulse_setvalue>
  Reg_Handler( rand_pulse_handler, 1, 3, TRUE);
     396:	89 ec       	ldi	r24, 0xC9	; 201
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	23 e0       	ldi	r18, 0x03	; 3
     3a4:	01 e0       	ldi	r16, 0x01	; 1
     3a6:	b1 d4       	rcall	.+2402   	; 0xd0a <Reg_Handler>
}
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <switchoff_trig3>:
void switchoff_trig2(void) {
  Reg_Handler( switchoff_trig2, 2, 1, FALSE);
  trig2_off();
}

void switchoff_trig3(void) {
     3ac:	0f 93       	push	r16
  Reg_Handler( switchoff_trig3, 2, 2, FALSE);
     3ae:	86 ed       	ldi	r24, 0xD6	; 214
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	42 e0       	ldi	r20, 0x02	; 2
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	22 e0       	ldi	r18, 0x02	; 2
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	a5 d4       	rcall	.+2378   	; 0xd0a <Reg_Handler>
  trig3_off();
     3c0:	43 98       	cbi	0x08, 3	; 8
}
     3c2:	0f 91       	pop	r16
     3c4:	08 95       	ret

000003c6 <switchoff_trig2>:
void switchoff_trig1(void) {
  Reg_Handler( switchoff_trig1, 2, 0, FALSE);
  trig1_off();
}

void switchoff_trig2(void) {
     3c6:	0f 93       	push	r16
  Reg_Handler( switchoff_trig2, 2, 1, FALSE);
     3c8:	83 ee       	ldi	r24, 0xE3	; 227
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	00 e0       	ldi	r16, 0x00	; 0
     3d8:	98 d4       	rcall	.+2352   	; 0xd0a <Reg_Handler>
  trig2_off();
     3da:	42 98       	cbi	0x08, 2	; 8
}
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <switchoff_trig1>:
#define trig2_off() (PORTC &= ~0x04)

#define trig3_on()  (PORTC |=  0x08)
#define trig3_off() (PORTC &= ~0x08)

void switchoff_trig1(void) {
     3e0:	0f 93       	push	r16
  Reg_Handler( switchoff_trig1, 2, 0, FALSE);
     3e2:	80 ef       	ldi	r24, 0xF0	; 240
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	42 e0       	ldi	r20, 0x02	; 2
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	8b d4       	rcall	.+2326   	; 0xd0a <Reg_Handler>
  trig1_off();
     3f4:	41 98       	cbi	0x08, 1	; 8
}
     3f6:	0f 91       	pop	r16
     3f8:	08 95       	ret

000003fa <USB_AnalogSample_Task>:
  }
}

TASK(USB_AnalogSample_Task) {

  if (USB_IsConnected) {
     3fa:	80 91 08 19 	lds	r24, 0x1908
     3fe:	88 23       	and	r24, r24
     400:	41 f1       	breq	.+80     	; 0x452 <USB_AnalogSample_Task+0x58>
    /* Select the Serial Tx Endpoint */
    Endpoint_SelectEndpoint(ANALOG_EPNUM);
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	80 93 e9 00 	sts	0x00E9, r24

    if (Endpoint_ReadWriteAllowed())
     408:	80 91 e8 00 	lds	r24, 0x00E8
     40c:	85 ff       	sbrs	r24, 5
     40e:	21 c0       	rjmp	.+66     	; 0x452 <USB_AnalogSample_Task+0x58>
    {
      /* Check if the Tx buffer contains anything to be sent to the host */
      if (Tx_Buffer.Elements)
     410:	80 91 cf 18 	lds	r24, 0x18CF
     414:	90 91 d0 18 	lds	r25, 0x18D0
     418:	89 2b       	or	r24, r25
     41a:	41 f4       	brne	.+16     	; 0x42c <USB_AnalogSample_Task+0x32>
     41c:	08 95       	ret
      {

        /* Write the transmission buffer contents to the received data endpoint */
        while (Tx_Buffer.Elements && ((Endpoint_BytesInEndpoint()+1) < ANALOG_EPSIZE)) {
          uint16_t tmp = Buffer_GetElement(&Tx_Buffer);
     41e:	8b e5       	ldi	r24, 0x5B	; 91
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	ef d4       	rcall	.+2526   	; 0xe02 <Buffer_GetElement>
			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
			 *  direction endpoints.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     424:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
     428:	90 93 f1 00 	sts	0x00F1, r25
      /* Check if the Tx buffer contains anything to be sent to the host */
      if (Tx_Buffer.Elements)
      {

        /* Write the transmission buffer contents to the received data endpoint */
        while (Tx_Buffer.Elements && ((Endpoint_BytesInEndpoint()+1) < ANALOG_EPSIZE)) {
     42c:	80 91 cf 18 	lds	r24, 0x18CF
     430:	90 91 d0 18 	lds	r25, 0x18D0
     434:	89 2b       	or	r24, r25
     436:	41 f0       	breq	.+16     	; 0x448 <USB_AnalogSample_Task+0x4e>
     438:	80 91 f2 00 	lds	r24, 0x00F2
     43c:	90 91 f3 00 	lds	r25, 0x00F3
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	80 34       	cpi	r24, 0x40	; 64
     444:	91 05       	cpc	r25, r1
     446:	58 f3       	brcs	.-42     	; 0x41e <USB_AnalogSample_Task+0x24>
          Endpoint_Write_Word_LE(tmp);
          //Endpoint_Write_Word_LE(Buffer_GetElement(&Tx_Buffer));
        }

        /* Send the data */
        Endpoint_ClearCurrentBank();
     448:	80 91 e8 00 	lds	r24, 0x00E8
     44c:	8f 77       	andi	r24, 0x7F	; 127
     44e:	80 93 e8 00 	sts	0x00E8, r24
     452:	08 95       	ret

00000454 <USB_ControlDevice_Task>:

/* Task to listen to USB port, reading in commands from host
   computer, and updating self as desired.
   */
TASK(USB_ControlDevice_Task)
{
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
  uint16_t aout_val1;
  uint8_t rand_pulse_cmd;
  uint8_t pulse_width_copy;
  uint8_t send_pulse_width = FALSE;

  if (USB_IsConnected) {
     464:	80 91 08 19 	lds	r24, 0x1908
     468:	88 23       	and	r24, r24
     46a:	09 f4       	brne	.+2      	; 0x46e <USB_ControlDevice_Task+0x1a>
     46c:	6b c2       	rjmp	.+1238   	; 0x944 <USB_ControlDevice_Task+0x4f0>
    /* Select the camera trigger out endpoint */
    Endpoint_SelectEndpoint(CAMTRIGOUT_EPNUM);
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	80 93 e9 00 	sts	0x00E9, r24

    /* Check if the current endpoint can be read from (contains a packet) */
    if (Endpoint_ReadWriteAllowed())
     474:	80 91 e8 00 	lds	r24, 0x00E8
     478:	85 ff       	sbrs	r24, 5
     47a:	64 c2       	rjmp	.+1224   	; 0x944 <USB_ControlDevice_Task+0x4f0>
		/* Inline Functions: */
			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     47c:	80 91 f1 00 	lds	r24, 0x00F1
    {
      command_class = Endpoint_Read_Byte(); // 0

      switch(command_class) {
     480:	86 30       	cpi	r24, 0x06	; 6
     482:	09 f4       	brne	.+2      	; 0x486 <USB_ControlDevice_Task+0x32>
     484:	c2 c0       	rjmp	.+388    	; 0x60a <USB_ControlDevice_Task+0x1b6>
     486:	87 30       	cpi	r24, 0x07	; 7
     488:	98 f4       	brcc	.+38     	; 0x4b0 <USB_ControlDevice_Task+0x5c>
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	09 f4       	brne	.+2      	; 0x490 <USB_ControlDevice_Task+0x3c>
     48e:	66 c0       	rjmp	.+204    	; 0x55c <USB_ControlDevice_Task+0x108>
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	38 f4       	brcc	.+14     	; 0x4a2 <USB_ControlDevice_Task+0x4e>
     494:	88 23       	and	r24, r24
     496:	09 f4       	brne	.+2      	; 0x49a <USB_ControlDevice_Task+0x46>
     498:	e0 c0       	rjmp	.+448    	; 0x65a <USB_ControlDevice_Task+0x206>
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <USB_ControlDevice_Task+0x4c>
     49e:	e7 c1       	rjmp	.+974    	; 0x86e <USB_ControlDevice_Task+0x41a>
     4a0:	1f c0       	rjmp	.+62     	; 0x4e0 <USB_ControlDevice_Task+0x8c>
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <USB_ControlDevice_Task+0x54>
     4a6:	8c c0       	rjmp	.+280    	; 0x5c0 <USB_ControlDevice_Task+0x16c>
     4a8:	85 30       	cpi	r24, 0x05	; 5
     4aa:	09 f0       	breq	.+2      	; 0x4ae <USB_ControlDevice_Task+0x5a>
     4ac:	e0 c1       	rjmp	.+960    	; 0x86e <USB_ControlDevice_Task+0x41a>
     4ae:	75 c0       	rjmp	.+234    	; 0x59a <USB_ControlDevice_Task+0x146>
     4b0:	89 30       	cpi	r24, 0x09	; 9
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <USB_ControlDevice_Task+0x62>
     4b4:	51 c1       	rjmp	.+674    	; 0x758 <USB_ControlDevice_Task+0x304>
     4b6:	8a 30       	cpi	r24, 0x0A	; 10
     4b8:	38 f4       	brcc	.+14     	; 0x4c8 <USB_ControlDevice_Task+0x74>
     4ba:	87 30       	cpi	r24, 0x07	; 7
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <USB_ControlDevice_Task+0x6c>
     4be:	e7 c0       	rjmp	.+462    	; 0x68e <USB_ControlDevice_Task+0x23a>
     4c0:	88 30       	cpi	r24, 0x08	; 8
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <USB_ControlDevice_Task+0x72>
     4c4:	d4 c1       	rjmp	.+936    	; 0x86e <USB_ControlDevice_Task+0x41a>
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <USB_ControlDevice_Task+0x88>
     4c8:	8b 30       	cpi	r24, 0x0B	; 11
     4ca:	09 f4       	brne	.+2      	; 0x4ce <USB_ControlDevice_Task+0x7a>
     4cc:	54 c1       	rjmp	.+680    	; 0x776 <USB_ControlDevice_Task+0x322>
     4ce:	8b 30       	cpi	r24, 0x0B	; 11
     4d0:	08 f4       	brcc	.+2      	; 0x4d4 <USB_ControlDevice_Task+0x80>
     4d2:	49 c1       	rjmp	.+658    	; 0x766 <USB_ControlDevice_Task+0x312>
     4d4:	8c 30       	cpi	r24, 0x0C	; 12
     4d6:	09 f0       	breq	.+2      	; 0x4da <USB_ControlDevice_Task+0x86>
     4d8:	ca c1       	rjmp	.+916    	; 0x86e <USB_ControlDevice_Task+0x41a>
     4da:	7f c1       	rjmp	.+766    	; 0x7da <USB_ControlDevice_Task+0x386>
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	c8 c1       	rjmp	.+912    	; 0x870 <USB_ControlDevice_Task+0x41c>
     4e0:	80 91 f1 00 	lds	r24, 0x00F1

        case CAMTRIG_NEW_TIMER3_DATA: // update timer3
          new_ocr3a =           Endpoint_Read_Byte()<<8; // 1 high byte
     4e4:	78 2f       	mov	r23, r24
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	80 91 f1 00 	lds	r24, 0x00F1
          new_ocr3a +=          Endpoint_Read_Byte();    // 2 low byte
     4ec:	68 0f       	add	r22, r24
     4ee:	71 1d       	adc	r23, r1
     4f0:	80 91 f1 00 	lds	r24, 0x00F1
          new_ocr3b =           Endpoint_Read_Byte()<<8; // 3 high byte
     4f4:	58 2f       	mov	r21, r24
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	80 91 f1 00 	lds	r24, 0x00F1
          new_ocr3b +=          Endpoint_Read_Byte();    // 4 low byte
     4fc:	48 0f       	add	r20, r24
     4fe:	51 1d       	adc	r21, r1
     500:	80 91 f1 00 	lds	r24, 0x00F1

          new_ocr3c =           Endpoint_Read_Byte()<<8; // 5 high byte
     504:	38 2f       	mov	r19, r24
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	80 91 f1 00 	lds	r24, 0x00F1
          new_ocr3c +=          Endpoint_Read_Byte();    // 6 low byte
     50c:	28 0f       	add	r18, r24
     50e:	31 1d       	adc	r19, r1
     510:	e0 91 f1 00 	lds	r30, 0x00F1
          new_icr3  =           Endpoint_Read_Byte()<<8; // 7 high byte  // icr3 is TOP for timer3
     514:	9e 2f       	mov	r25, r30
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	e0 91 f1 00 	lds	r30, 0x00F1
          new_icr3 +=           Endpoint_Read_Byte();    // 8 low byte
     51c:	8e 0f       	add	r24, r30
     51e:	91 1d       	adc	r25, r1
     520:	e0 91 f1 00 	lds	r30, 0x00F1

          clock_select_timer3 = Endpoint_Read_Byte(); // 9

          // update timer3
          OCR3A=(new_ocr3a);
     524:	70 93 99 00 	sts	0x0099, r23
     528:	60 93 98 00 	sts	0x0098, r22
          OCR3B=(new_ocr3b);
     52c:	50 93 9b 00 	sts	0x009B, r21
     530:	40 93 9a 00 	sts	0x009A, r20
          OCR3C=(new_ocr3c);
     534:	30 93 9d 00 	sts	0x009D, r19
     538:	20 93 9c 00 	sts	0x009C, r18
          ICR3=(new_icr3);  // icr3 is TOP for timer3
     53c:	90 93 97 00 	sts	0x0097, r25
     540:	80 93 96 00 	sts	0x0096, r24

          TCNT3 = 0; // reset counter to zero
     544:	10 92 95 00 	sts	0x0095, r1
     548:	10 92 94 00 	sts	0x0094, r1

          TCCR3B = (TCCR3B & 0xF8) | (clock_select_timer3 & 0x07); // low 3 bits sets CS
     54c:	80 91 91 00 	lds	r24, 0x0091
     550:	e7 70       	andi	r30, 0x07	; 7
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	e8 2b       	or	r30, r24
     556:	e0 93 91 00 	sts	0x0091, r30
     55a:	89 c1       	rjmp	.+786    	; 0x86e <USB_ControlDevice_Task+0x41a>
          break;

        case CAMTRIG_DO_TRIG_ONCE:
          TCCR3B = (TCCR3B & 0xF8) | (0 & 0x07); // low 3 bits sets CS to 0 (stop)
     55c:	80 91 91 00 	lds	r24, 0x0091
     560:	88 7f       	andi	r24, 0xF8	; 248
     562:	80 93 91 00 	sts	0x0091, r24

          TCNT3=(0xFF00); // trigger overflow soon
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	9f ef       	ldi	r25, 0xFF	; 255
     56a:	90 93 95 00 	sts	0x0095, r25
     56e:	80 93 94 00 	sts	0x0094, r24
          //OCR3A=(0xFE00);
          OCR3A=(0x00FF);
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	90 93 99 00 	sts	0x0099, r25
     57a:	80 93 98 00 	sts	0x0098, r24
          ICR3=(0xFFFF);  // icr3 is TOP for timer3
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	9f ef       	ldi	r25, 0xFF	; 255
     582:	90 93 97 00 	sts	0x0097, r25
     586:	80 93 96 00 	sts	0x0096, r24

          trig_once_mode=1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 15 01 	sts	0x0115, r24

          // start clock
          TCCR3B = (TCCR3B & 0xF8) | (1 & 0x07); // low 3 bits sets CS
     590:	80 91 91 00 	lds	r24, 0x0091
     594:	88 7f       	andi	r24, 0xF8	; 248
     596:	81 60       	ori	r24, 0x01	; 1
     598:	35 c0       	rjmp	.+106    	; 0x604 <USB_ControlDevice_Task+0x1b0>
          break;

        case CAMTRIG_RESET_FRAMECOUNT_A:
          cli();
     59a:	f8 94       	cli
          framecount_A = 0;
     59c:	10 92 1b 01 	sts	0x011B, r1
     5a0:	10 92 1c 01 	sts	0x011C, r1
     5a4:	10 92 1d 01 	sts	0x011D, r1
     5a8:	10 92 1e 01 	sts	0x011E, r1
          epoch=0;
     5ac:	10 92 1f 01 	sts	0x011F, r1
     5b0:	10 92 20 01 	sts	0x0120, r1
     5b4:	10 92 21 01 	sts	0x0121, r1
     5b8:	10 92 22 01 	sts	0x0122, r1
          sei();
     5bc:	78 94       	sei
     5be:	57 c1       	rjmp	.+686    	; 0x86e <USB_ControlDevice_Task+0x41a>

        case CAMTRIG_DOUT_HIGH:
          /* XXX This is cruft left over from a long time ago. Don't call */

          // force output compare A
          OCR3A=(0xFE00U);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	9e ef       	ldi	r25, 0xFE	; 254
     5c4:	90 93 99 00 	sts	0x0099, r25
     5c8:	80 93 98 00 	sts	0x0098, r24
          //OCR3B=(new_ocr3b);
          //OCR3C=(new_ocr3c);
          ICR3=(0xFEFFU);
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	9e ef       	ldi	r25, 0xFE	; 254
     5d0:	90 93 97 00 	sts	0x0097, r25
     5d4:	80 93 96 00 	sts	0x0096, r24
          TCNT3=(0xFFFFU);
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	9f ef       	ldi	r25, 0xFF	; 255
     5dc:	90 93 95 00 	sts	0x0095, r25
     5e0:	80 93 94 00 	sts	0x0094, r24
          //Led0_on();
          TCCR3B = (TCCR3B & 0xF8) | (1 & 0x07); // start clock
     5e4:	80 91 91 00 	lds	r24, 0x0091
     5e8:	88 7f       	andi	r24, 0xF8	; 248
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	80 93 91 00 	sts	0x0091, r24
          while (1) {
            // wait for timer to roll over and thus trigger output compare
            uint32_t tmp_tcnt = TCNT3;
     5f0:	80 91 94 00 	lds	r24, 0x0094
     5f4:	90 91 95 00 	lds	r25, 0x0095
            if (tmp_tcnt < 0xFFFFU) {
     5f8:	8f 5f       	subi	r24, 0xFF	; 255
     5fa:	9f 4f       	sbci	r25, 0xFF	; 255
     5fc:	c9 f3       	breq	.-14     	; 0x5f0 <USB_ControlDevice_Task+0x19c>
              break;
            }
          }
          //Led3_on();
          TCCR3B = (TCCR3B & 0xF8) | (0 & 0x07); // stop clock
     5fe:	80 91 91 00 	lds	r24, 0x0091
     602:	88 7f       	andi	r24, 0xF8	; 248
     604:	80 93 91 00 	sts	0x0091, r24
     608:	32 c1       	rjmp	.+612    	; 0x86e <USB_ControlDevice_Task+0x41a>
     60a:	80 91 f1 00 	lds	r24, 0x00F1
          break;

        case CAMTRIG_SET_EXT_TRIG:
          ext_trig_flags = Endpoint_Read_Byte();

          if (ext_trig_flags & EXT_TRIG1) {
     60e:	e8 2e       	mov	r14, r24
     610:	80 ff       	sbrs	r24, 0
     612:	0a c0       	rjmp	.+20     	; 0x628 <USB_ControlDevice_Task+0x1d4>
            trig1_on();
     614:	41 9a       	sbi	0x08, 1	; 8
            Reg_Handler( switchoff_trig1, 2, 0, TRUE);
     616:	80 ef       	ldi	r24, 0xF0	; 240
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	42 e0       	ldi	r20, 0x02	; 2
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	01 e0       	ldi	r16, 0x01	; 1
     626:	71 d3       	rcall	.+1762   	; 0xd0a <Reg_Handler>
          }

          if (ext_trig_flags & EXT_TRIG2) {
     628:	e1 fe       	sbrs	r14, 1
     62a:	0a c0       	rjmp	.+20     	; 0x640 <USB_ControlDevice_Task+0x1ec>
            trig2_on();
     62c:	42 9a       	sbi	0x08, 2	; 8
            Reg_Handler( switchoff_trig2, 2, 1, TRUE);
     62e:	83 ee       	ldi	r24, 0xE3	; 227
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	42 e0       	ldi	r20, 0x02	; 2
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	01 e0       	ldi	r16, 0x01	; 1
     63e:	65 d3       	rcall	.+1738   	; 0xd0a <Reg_Handler>
          }

          if (ext_trig_flags & EXT_TRIG3) {
     640:	e2 fe       	sbrs	r14, 2
     642:	15 c1       	rjmp	.+554    	; 0x86e <USB_ControlDevice_Task+0x41a>
            trig3_on();
     644:	43 9a       	sbi	0x08, 3	; 8
            Reg_Handler( switchoff_trig3, 2, 2, TRUE);
     646:	86 ed       	ldi	r24, 0xD6	; 214
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	42 e0       	ldi	r20, 0x02	; 2
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	01 e0       	ldi	r16, 0x01	; 1
     656:	59 d3       	rcall	.+1714   	; 0xd0a <Reg_Handler>
     658:	0a c1       	rjmp	.+532    	; 0x86e <USB_ControlDevice_Task+0x41a>
          }
          break;

        case CAMTRIG_ENTER_DFU:
          USB_ShutDown();
     65a:	57 d4       	rcall	.+2222   	; 0xf0a <USB_ShutDown>

          // shutdown timer3 and adc interrupts
          ADCSRA &= ~(1 << ADIE); /* disable adc interrupt */
     65c:	80 91 7a 00 	lds	r24, 0x007A
     660:	87 7f       	andi	r24, 0xF7	; 247
     662:	80 93 7a 00 	sts	0x007A, r24
          TIMSK3 = 0; /* disable timer3 interrupt */
     666:	10 92 71 00 	sts	0x0071, r1
          // shutdown ADC device
          ADC_Init(0);
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	80 93 7a 00 	sts	0x007A, r24
     670:	80 ed       	ldi	r24, 0xD0	; 208
     672:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     674:	20 e9       	ldi	r18, 0x90	; 144
     676:	31 e0       	ldi	r19, 0x01	; 1
     678:	f9 01       	movw	r30, r18
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <USB_ControlDevice_Task+0x226>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     680:	d9 f7       	brne	.-10     	; 0x678 <USB_ControlDevice_Task+0x224>

          _delay_ms(200); // 200 msec delay to ensure host logs the disconnection

          (*start_bootloader)();
     682:	e0 91 0c 01 	lds	r30, 0x010C
     686:	f0 91 0d 01 	lds	r31, 0x010D
     68a:	09 95       	icall
     68c:	f0 c0       	rjmp	.+480    	; 0x86e <USB_ControlDevice_Task+0x41a>
     68e:	80 91 f1 00 	lds	r24, 0x00F1
     692:	10 91 f1 00 	lds	r17, 0x00F1

        case CAMTRIG_AIN_SERVICE:
          analog_cmd_flags = Endpoint_Read_Byte();
          analog_sample_bits = Endpoint_Read_Byte();

          if (analog_cmd_flags & ADC_RESET_AIN) {
     696:	08 2f       	mov	r16, r24
     698:	86 ff       	sbrs	r24, 6
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <USB_ControlDevice_Task+0x256>
  trig3_off();
}


static inline void reset_ain(void) {
  cli();
     69c:	f8 94       	cli
  overflowed=0;
     69e:	10 92 19 01 	sts	0x0119, r1
  Buffer_Initialize(&Tx_Buffer);
     6a2:	8b e5       	ldi	r24, 0x5B	; 91
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	57 d3       	rcall	.+1710   	; 0xd56 <Buffer_Initialize>
  sei();
     6a8:	78 94       	sei

          if (analog_cmd_flags & ADC_RESET_AIN) {
            reset_ain();
          }

          if (analog_cmd_flags & ADC_START_STREAMING) {
     6aa:	00 ff       	sbrs	r16, 0
     6ac:	4d c0       	rjmp	.+154    	; 0x748 <USB_ControlDevice_Task+0x2f4>
            cli(); /* We don't want the analog input interrupt happening during this */
     6ae:	f8 94       	cli
            ADC_N_CHANS = 0;
     6b0:	10 92 18 01 	sts	0x0118, r1
            if (analog_cmd_flags & ENABLE_ADC_CHAN0) {
     6b4:	02 ff       	sbrs	r16, 2
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <USB_ControlDevice_Task+0x26e>
              ADC_CHANS[ADC_N_CHANS] = 0;
     6b8:	10 92 d1 18 	sts	0x18D1, r1
              ADC_N_CHANS++;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 18 01 	sts	0x0118, r24
            }
            if (analog_cmd_flags & ENABLE_ADC_CHAN1) {
     6c2:	03 ff       	sbrs	r16, 3
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <USB_ControlDevice_Task+0x288>
              ADC_CHANS[ADC_N_CHANS] = 1;
     6c6:	80 91 18 01 	lds	r24, 0x0118
     6ca:	e8 2f       	mov	r30, r24
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	ef 52       	subi	r30, 0x2F	; 47
     6d0:	f7 4e       	sbci	r31, 0xE7	; 231
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	90 83       	st	Z, r25
              ADC_N_CHANS++;
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
     6d8:	80 93 18 01 	sts	0x0118, r24
            }
            if (analog_cmd_flags & ENABLE_ADC_CHAN2) {
     6dc:	04 ff       	sbrs	r16, 4
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <USB_ControlDevice_Task+0x2a2>
              ADC_CHANS[ADC_N_CHANS] = 2;
     6e0:	80 91 18 01 	lds	r24, 0x0118
     6e4:	e8 2f       	mov	r30, r24
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ef 52       	subi	r30, 0x2F	; 47
     6ea:	f7 4e       	sbci	r31, 0xE7	; 231
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	90 83       	st	Z, r25
              ADC_N_CHANS++;
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	80 93 18 01 	sts	0x0118, r24
            }
            if (analog_cmd_flags & ENABLE_ADC_CHAN3) {
     6f6:	05 ff       	sbrs	r16, 5
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <USB_ControlDevice_Task+0x2bc>
              ADC_CHANS[ADC_N_CHANS] = 3;
     6fa:	80 91 18 01 	lds	r24, 0x0118
     6fe:	e8 2f       	mov	r30, r24
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ef 52       	subi	r30, 0x2F	; 47
     704:	f7 4e       	sbci	r31, 0xE7	; 231
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	90 83       	st	Z, r25
              ADC_N_CHANS++;
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	80 93 18 01 	sts	0x0118, r24
            }

            uint8_t adps_prescale_bits = (analog_sample_bits & 0x07); /* low 3 bits */
            downsample_countdown_max = (analog_sample_bits & 0xF8) >> 3; /* high 5 bits */
     710:	81 2f       	mov	r24, r17
     712:	86 95       	lsr	r24
     714:	86 95       	lsr	r24
     716:	86 95       	lsr	r24
     718:	80 93 1a 01 	sts	0x011A, r24
            ADC_Init(ADC_FREE_RUNNING | adps_prescale_bits | ADC_INTERRUPT_ENABLE );
     71c:	17 70       	andi	r17, 0x07	; 7
     71e:	18 6a       	ori	r17, 0xA8	; 168
     720:	10 93 7a 00 	sts	0x007A, r17

            /* Do this MAX_ADC_CHANS times */
            sei();
     724:	78 94       	sei
            ADC_CHAN_IDX = 0;
     726:	10 92 17 01 	sts	0x0117, r1
            /* Start the ADC conversion in free running mode */
            ADCSRA |= (1 << ADIE); /* enable adc interrupt */
     72a:	80 91 7a 00 	lds	r24, 0x007A
     72e:	88 60       	ori	r24, 0x08	; 8
     730:	80 93 7a 00 	sts	0x007A, r24
            ADC_StartReading(ADC_REFERENCE_AVCC | ADC_LEFT_ADJUSTED | ADC_CHANS[ADC_CHAN_IDX]);
     734:	80 91 d1 18 	lds	r24, 0x18D1
     738:	80 66       	ori	r24, 0x60	; 96
			 *
			 *  \param MUXMask  Mask comprising of an ADC channel number, reference mask and adjustment mask
			 */
			static inline void ADC_StartReading(const uint8_t MUXMask)
			{
				ADMUX = MUXMask;
     73a:	80 93 7c 00 	sts	0x007C, r24
			
				ADCSRA |= (1 << ADSC);
     73e:	80 91 7a 00 	lds	r24, 0x007A
     742:	80 64       	ori	r24, 0x40	; 64
     744:	80 93 7a 00 	sts	0x007A, r24
          }

          if (analog_cmd_flags & ADC_STOP_STREAMING) {
     748:	01 ff       	sbrs	r16, 1
     74a:	91 c0       	rjmp	.+290    	; 0x86e <USB_ControlDevice_Task+0x41a>
            ADCSRA &= ~(1 << ADIE); /* disable adc interrupt */
     74c:	80 91 7a 00 	lds	r24, 0x007A
     750:	87 7f       	andi	r24, 0xF7	; 247
     752:	80 93 7a 00 	sts	0x007A, r24
     756:	8b c0       	rjmp	.+278    	; 0x86e <USB_ControlDevice_Task+0x41a>
     758:	90 91 f1 00 	lds	r25, 0x00F1
				PORTD &= ~LedMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LedMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LedMask);
     75c:	8b b1       	in	r24, 0x0b	; 11
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	89 2b       	or	r24, r25
     762:	8b b9       	out	0x0b, r24	; 11
     764:	84 c0       	rjmp	.+264    	; 0x86e <USB_ControlDevice_Task+0x41a>
     766:	80 91 f1 00 	lds	r24, 0x00F1
          break;

        case CAMTRIG_RAND_PULSE:
          // Enable/Disable random pulses
          rand_pulse_cmd = Endpoint_Read_Byte();
          if (rand_pulse_cmd == RAND_PULSE_DISABLE) {
     76a:	88 23       	and	r24, r24
     76c:	11 f4       	brne	.+4      	; 0x772 <USB_ControlDevice_Task+0x31e>
  DDRC |= 0b00100000; 
}

void rand_pulse_disable(void) {
  // Disable random pulse generation
  DDRC &= 0b11011111;
     76e:	3d 98       	cbi	0x07, 5	; 7
     770:	7e c0       	rjmp	.+252    	; 0x86e <USB_ControlDevice_Task+0x41a>
  // which add another +1 as it occurs after the overflow interrupt.
}

void rand_pulse_enable(void) {
  // Enable random pulse generation
  DDRC |= 0b00100000; 
     772:	3d 9a       	sbi	0x07, 5	; 7
     774:	7c c0       	rjmp	.+248    	; 0x86e <USB_ControlDevice_Task+0x41a>
     776:	20 91 f1 00 	lds	r18, 0x00F1
            rand_pulse_enable();
          }
          break;

        case CAMTRIG_SET_AOUT:
          aout_val0 = Endpoint_Read_Byte()<<8;  // 1 high byte
     77a:	92 2f       	mov	r25, r18
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	20 91 f1 00 	lds	r18, 0x00F1
          aout_val0 += Endpoint_Read_Byte();    // 2 low byte
     782:	ac 01       	movw	r20, r24
     784:	42 0f       	add	r20, r18
     786:	51 1d       	adc	r21, r1
     788:	20 91 f1 00 	lds	r18, 0x00F1

          aout_val1 = Endpoint_Read_Byte()<<8;  // 1 high byte
     78c:	92 2f       	mov	r25, r18
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	20 91 f1 00 	lds	r18, 0x00F1
          aout_val1 += Endpoint_Read_Byte();    // 2 low byte
     794:	bc 01       	movw	r22, r24
     796:	62 0f       	add	r22, r18
     798:	71 1d       	adc	r23, r1
     79a:	9b 01       	movw	r18, r22
//
// WBD - function for setting PWM generated analog output valus
//
// ----------------------------------------------------------------------------
void set_aout_values(uint16_t value0, uint16_t value1) {
  if (value0 <= TIMER1_TOP) {
     79c:	71 e0       	ldi	r23, 0x01	; 1
     79e:	45 3f       	cpi	r20, 0xF5	; 245
     7a0:	57 07       	cpc	r21, r23
     7a2:	28 f4       	brcc	.+10     	; 0x7ae <USB_ControlDevice_Task+0x35a>
    OCR1A = value0;
     7a4:	50 93 89 00 	sts	0x0089, r21
     7a8:	40 93 88 00 	sts	0x0088, r20
     7ac:	06 c0       	rjmp	.+12     	; 0x7ba <USB_ControlDevice_Task+0x366>
  }
  else {
    OCR1A = TIMER1_TOP;
     7ae:	84 ef       	ldi	r24, 0xF4	; 244
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	90 93 89 00 	sts	0x0089, r25
     7b6:	80 93 88 00 	sts	0x0088, r24
  }
  if (value1 <= TIMER1_TOP) {
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	25 3f       	cpi	r18, 0xF5	; 245
     7be:	38 07       	cpc	r19, r24
     7c0:	28 f4       	brcc	.+10     	; 0x7cc <USB_ControlDevice_Task+0x378>
    OCR1B = value1;
     7c2:	30 93 8b 00 	sts	0x008B, r19
     7c6:	20 93 8a 00 	sts	0x008A, r18
     7ca:	51 c0       	rjmp	.+162    	; 0x86e <USB_ControlDevice_Task+0x41a>
  }
  else {
    OCR1B = TIMER1_TOP;
     7cc:	84 ef       	ldi	r24, 0xF4	; 244
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	90 93 8b 00 	sts	0x008B, r25
     7d4:	80 93 8a 00 	sts	0x008A, r24
     7d8:	4a c0       	rjmp	.+148    	; 0x86e <USB_ControlDevice_Task+0x41a>
     7da:	60 91 f1 00 	lds	r22, 0x00F1
     7de:	80 91 f1 00 	lds	r24, 0x00F1
     7e2:	20 91 f1 00 	lds	r18, 0x00F1
     7e6:	e0 90 f1 00 	lds	r14, 0x00F1
          set_aout_values(aout_val0,aout_val1);
          break;

        case CAMTRIG_GET_PULSE_WIDTH:
          framecount_A_copy  = ((uint32_t) Endpoint_Read_Byte());
          framecount_A_copy  += ((uint32_t) Endpoint_Read_Byte())<<8;
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	aa 24       	eor	r10, r10
     7f2:	b8 2e       	mov	r11, r24
     7f4:	c9 2e       	mov	r12, r25
     7f6:	da 2e       	mov	r13, r26
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	a9 01       	movw	r20, r18
     800:	33 27       	eor	r19, r19
     802:	22 27       	eor	r18, r18
     804:	a2 0e       	add	r10, r18
     806:	b3 1e       	adc	r11, r19
     808:	c4 1e       	adc	r12, r20
     80a:	d5 1e       	adc	r13, r21
          framecount_A_copy  += ((uint32_t) Endpoint_Read_Byte())<<16;
     80c:	a6 0e       	add	r10, r22
     80e:	b1 1c       	adc	r11, r1
     810:	c1 1c       	adc	r12, r1
     812:	d1 1c       	adc	r13, r1
          framecount_A_copy  += (uint32_t) Endpoint_Read_Byte()<<24;
     814:	ff 24       	eor	r15, r15
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	1e 2d       	mov	r17, r14
     81c:	00 27       	eor	r16, r16
     81e:	ff 24       	eor	r15, r15
     820:	ee 24       	eor	r14, r14
     822:	ae 0c       	add	r10, r14
     824:	bf 1c       	adc	r11, r15
     826:	c0 1e       	adc	r12, r16
     828:	d1 1e       	adc	r13, r17

uint8_t get_pulse_width(uint32_t frame) {
  // Get pulse width associated with frame and epoch from pulse buffer
  uint8_t i;
  uint8_t pulse_width = RAND_PULSE_NOT_FOUND;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     82a:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     82c:	f8 94       	cli
     82e:	72 e0       	ldi	r23, 0x02	; 2
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<PULSE_BUF_SZ;i++) {
      if (frame == rand_pulse_buf.frame[i]) {
     834:	f9 01       	movw	r30, r18
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e8 5d       	subi	r30, 0xD8	; 216
     840:	fe 4f       	sbci	r31, 0xFE	; 254
     842:	83 85       	ldd	r24, Z+11	; 0x0b
     844:	94 85       	ldd	r25, Z+12	; 0x0c
     846:	a5 85       	ldd	r26, Z+13	; 0x0d
     848:	b6 85       	ldd	r27, Z+14	; 0x0e
     84a:	a8 16       	cp	r10, r24
     84c:	b9 06       	cpc	r11, r25
     84e:	ca 06       	cpc	r12, r26
     850:	db 06       	cpc	r13, r27
     852:	21 f4       	brne	.+8      	; 0x85c <USB_ControlDevice_Task+0x408>
        pulse_width = rand_pulse_buf.width[i];
     854:	f9 01       	movw	r30, r18
     856:	e8 5d       	subi	r30, 0xD8	; 216
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	71 81       	ldd	r23, Z+1	; 0x01
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t get_pulse_width(uint32_t frame) {
  // Get pulse width associated with frame and epoch from pulse buffer
  uint8_t i;
  uint8_t pulse_width = RAND_PULSE_NOT_FOUND;
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    for (i=0; i<PULSE_BUF_SZ;i++) {
     860:	2a 30       	cpi	r18, 0x0A	; 10
     862:	31 05       	cpc	r19, r1
     864:	39 f7       	brne	.-50     	; 0x834 <USB_ControlDevice_Task+0x3e0>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     866:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	02 c0       	rjmp	.+4      	; 0x872 <USB_ControlDevice_Task+0x41e>
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0

          break;
      }

      /* Acknowedge the packet, clear the bank ready for the next packet */
      Endpoint_ClearCurrentBank();
     872:	80 91 e8 00 	lds	r24, 0x00E8
     876:	8f 77       	andi	r24, 0x7F	; 127
     878:	80 93 e8 00 	sts	0x00E8, r24
    }

    if (send_data_now) {
     87c:	99 23       	and	r25, r25
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_ControlDevice_Task+0x42e>
     880:	51 c0       	rjmp	.+162    	; 0x924 <USB_ControlDevice_Task+0x4d0>
      /* Send requested framestamp data back to host */
      Endpoint_SelectEndpoint(CAMTRIGIN_EPNUM);
     882:	82 e8       	ldi	r24, 0x82	; 130
     884:	80 93 e9 00 	sts	0x00E9, r24

      ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     888:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     88a:	f8 94       	cli
      {
        tcnt3_copy= TCNT3;
     88c:	e0 91 94 00 	lds	r30, 0x0094
     890:	f0 91 95 00 	lds	r31, 0x0095
        framecount_A_copy = framecount_A;
     894:	20 91 1b 01 	lds	r18, 0x011B
     898:	30 91 1c 01 	lds	r19, 0x011C
     89c:	40 91 1d 01 	lds	r20, 0x011D
     8a0:	50 91 1e 01 	lds	r21, 0x011E
        epoch_copy = epoch;
     8a4:	a0 90 1f 01 	lds	r10, 0x011F
     8a8:	b0 90 20 01 	lds	r11, 0x0120
     8ac:	c0 90 21 01 	lds	r12, 0x0121
     8b0:	d0 90 22 01 	lds	r13, 0x0122
        pulse_width_copy = rand_pulse_width;
     8b4:	70 91 16 01 	lds	r23, 0x0116
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8b8:	8f bf       	out	0x3f, r24	; 63
      }

      while (!Endpoint_ReadWriteAllowed()) {} //spin
     8ba:	80 91 e8 00 	lds	r24, 0x00E8
     8be:	85 ff       	sbrs	r24, 5
     8c0:	fc cf       	rjmp	.-8      	; 0x8ba <USB_ControlDevice_Task+0x466>
			}

			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints. */
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     8c2:	20 93 f1 00 	sts	0x00F1, r18

      Endpoint_Write_Byte((uint8_t)(framecount_A_copy & 0xFF));
      Endpoint_Write_Byte((uint8_t)((framecount_A_copy >> 8) & 0xFF));
     8c6:	bb 27       	eor	r27, r27
     8c8:	a5 2f       	mov	r26, r21
     8ca:	94 2f       	mov	r25, r20
     8cc:	83 2f       	mov	r24, r19
     8ce:	80 93 f1 00 	sts	0x00F1, r24
      Endpoint_Write_Byte((uint8_t)((framecount_A_copy >> 16) & 0xFF));
     8d2:	ca 01       	movw	r24, r20
     8d4:	aa 27       	eor	r26, r26
     8d6:	bb 27       	eor	r27, r27
     8d8:	80 93 f1 00 	sts	0x00F1, r24
      Endpoint_Write_Byte((uint8_t)((framecount_A_copy >> 24) & 0xFF));
     8dc:	85 2f       	mov	r24, r21
     8de:	99 27       	eor	r25, r25
     8e0:	aa 27       	eor	r26, r26
     8e2:	bb 27       	eor	r27, r27
     8e4:	80 93 f1 00 	sts	0x00F1, r24
     8e8:	a0 92 f1 00 	sts	0x00F1, r10

      Endpoint_Write_Byte((uint8_t)(epoch_copy & 0xFF));
      Endpoint_Write_Byte((uint8_t)((epoch_copy >> 8) & 0xFF));
     8ec:	bb 27       	eor	r27, r27
     8ee:	ad 2d       	mov	r26, r13
     8f0:	9c 2d       	mov	r25, r12
     8f2:	8b 2d       	mov	r24, r11
     8f4:	80 93 f1 00 	sts	0x00F1, r24
      Endpoint_Write_Byte((uint8_t)((epoch_copy >> 16) & 0xFF));
     8f8:	c6 01       	movw	r24, r12
     8fa:	aa 27       	eor	r26, r26
     8fc:	bb 27       	eor	r27, r27
     8fe:	80 93 f1 00 	sts	0x00F1, r24
      Endpoint_Write_Byte((uint8_t)((epoch_copy >> 24) & 0xFF));
     902:	8d 2d       	mov	r24, r13
     904:	99 27       	eor	r25, r25
     906:	aa 27       	eor	r26, r26
     908:	bb 27       	eor	r27, r27
     90a:	80 93 f1 00 	sts	0x00F1, r24
     90e:	e0 93 f1 00 	sts	0x00F1, r30
     912:	f0 93 f1 00 	sts	0x00F1, r31
     916:	70 93 f1 00 	sts	0x00F1, r23

      // ---------------------------------------
      Endpoint_Write_Byte((uint8_t) pulse_width_copy);
      // ---------------------------------------

      Endpoint_ClearCurrentBank(); // Send data over the USB
     91a:	80 91 e8 00 	lds	r24, 0x00E8
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	80 93 e8 00 	sts	0x00E8, r24
    }

    if (send_pulse_width) {
     924:	66 23       	and	r22, r22
     926:	71 f0       	breq	.+28     	; 0x944 <USB_ControlDevice_Task+0x4f0>
      // Send pulse width data back to host
      Endpoint_SelectEndpoint(CAMTRIGIN_EPNUM);
     928:	82 e8       	ldi	r24, 0x82	; 130
     92a:	80 93 e9 00 	sts	0x00E9, r24
      while (!Endpoint_ReadWriteAllowed()) {} //spin
     92e:	80 91 e8 00 	lds	r24, 0x00E8
     932:	85 ff       	sbrs	r24, 5
     934:	fc cf       	rjmp	.-8      	; 0x92e <USB_ControlDevice_Task+0x4da>
     936:	70 93 f1 00 	sts	0x00F1, r23
      Endpoint_Write_Byte((uint8_t) pulse_width_copy);
      Endpoint_ClearCurrentBank(); // Send data over the USB
     93a:	80 91 e8 00 	lds	r24, 0x00E8
     93e:	8f 77       	andi	r24, 0x7F	; 127
     940:	80 93 e8 00 	sts	0x00E8, r24
    }

  }
}
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	08 95       	ret

00000956 <Event_USB_ConfigurationChanged>:
  /* Scheduling - routine never returns, so put this last in the main function */
  Scheduler_Start();
}

EVENT_HANDLER(USB_ConfigurationChanged)
{
     956:	0f 93       	push	r16
  /* Setup USB In and Out Endpoints */
  Endpoint_ConfigureEndpoint(CAMTRIGIN_EPNUM, EP_TYPE_BULK,
     958:	82 e8       	ldi	r24, 0x82	; 130
     95a:	62 e0       	ldi	r22, 0x02	; 2
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	20 e1       	ldi	r18, 0x10	; 16
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	00 e0       	ldi	r16, 0x00	; 0
     964:	01 d3       	rcall	.+1538   	; 0xf68 <Endpoint_ConfigureEndpoint>
      ENDPOINT_DIR_IN, CAMTRIGIN_EPSIZE,
      ENDPOINT_BANK_SINGLE);

  Endpoint_ConfigureEndpoint(CAMTRIGOUT_EPNUM, EP_TYPE_BULK,
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	62 e0       	ldi	r22, 0x02	; 2
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	20 e1       	ldi	r18, 0x10	; 16
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	fb d2       	rcall	.+1526   	; 0xf68 <Endpoint_ConfigureEndpoint>
      ENDPOINT_DIR_OUT, CAMTRIGOUT_EPSIZE,
      ENDPOINT_BANK_SINGLE);

  /* Setup analog sample stream endpoint */
  Endpoint_ConfigureEndpoint(ANALOG_EPNUM, EP_TYPE_BULK,
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	20 e4       	ldi	r18, 0x40	; 64
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f5 d2       	rcall	.+1514   	; 0xf68 <Endpoint_ConfigureEndpoint>
      ENDPOINT_DIR_IN, ANALOG_EPSIZE,
      ENDPOINT_BANK_SINGLE);

}
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  starts the scheduler to run the application tasks.
 */
int main(void)
{
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     98a:	84 b7       	in	r24, 0x34	; 52
     98c:	87 7f       	andi	r24, 0xF7	; 247
     98e:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     990:	88 e1       	ldi	r24, 0x18	; 24
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	80 93 60 00 	sts	0x0060, r24
     99a:	10 92 60 00 	sts	0x0060, r1
     99e:	0f be       	out	0x3f, r0	; 63
			 *  \param PrescalerMask   The mask of the new prescaler setting for CLKPR
			 */
			static inline void SetSystemClockPrescaler(uint8_t PrescalerMask)
			{
					uint8_t tmp = (1 << CLKPCE);
					__asm__ __volatile__ (
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	80 93 61 00 	sts	0x0061, r24
     9ac:	90 93 61 00 	sts	0x0061, r25
     9b0:	0f be       	out	0x3f, r0	; 63

  /* Disable clock division */
  SetSystemClockPrescaler(0);

  Buffer_Initialize(&Tx_Buffer);
     9b2:	8b e5       	ldi	r24, 0x5B	; 91
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	cf d1       	rcall	.+926    	; 0xd56 <Buffer_Initialize>

  /* Hardware initialization */
  DDRF = 0; // Set Port F to be all input (for analog input) //ADC_SetupChannel(1|2|3);
     9b8:	10 ba       	out	0x10, r1	; 16
  //ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128 | ADC_INTERRUPT_ENABLE );
  ADC_N_CHANS=0;
     9ba:	10 92 18 01 	sts	0x0118, r1

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     9be:	8a b1       	in	r24, 0x0a	; 10
     9c0:	80 6f       	ori	r24, 0xF0	; 240
     9c2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     9c4:	8b b1       	in	r24, 0x0b	; 11
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	8b b9       	out	0x0b, r24	; 11
  ADC_StartReading(ADC_REFERENCE_AVCC | ADC_LEFT_ADJUSTED | ADC_CHANS[ADC_CHAN_IDX]);
#endif

  LEDs_Init();

  PWM_Init();
     9ca:	f2 db       	rcall	.-2076   	; 0x1b0 <PWM_Init>
  Handler_Init();
     9cc:	1f d1       	rcall	.+574    	; 0xc0c <Handler_Init>

  /* Turn on interrupts */
  sei();
     9ce:	78 94       	sei
			#define MAX_DELAYCTR_COUNT                0xFFFF

		/* Inline Functions: */
			static inline void Scheduler_InitScheduler(const uint8_t TotalTasks)
			{
				Scheduler_TotalTasks = TotalTasks;
     9d0:	13 e0       	ldi	r17, 0x03	; 3
     9d2:	10 93 01 19 	sts	0x1901, r17

  /* Initialize Scheduler so that it can be used */
  Scheduler_Init();

  /* Initialize USB Subsystem */
  USB_Init();
     9d6:	b7 d2       	rcall	.+1390   	; 0xf46 <USB_Init>
  DDRC |= 0b00100000; 
}

void rand_pulse_disable(void) {
  // Disable random pulse generation
  DDRC &= 0b11011111;
     9d8:	3d 98       	cbi	0x07, 5	; 7
  USB_Init();

  // WBD  setup random pulse generation --------------------------------------- 
  rand_pulse_disable();
  //rand_pulse_enable();
  rand_pulse_setvalue();
     9da:	9c dc       	rcall	.-1736   	; 0x314 <rand_pulse_setvalue>
  Reg_Handler( rand_pulse_handler, 1, 3, TRUE);
     9dc:	89 ec       	ldi	r24, 0xC9	; 201
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	23 e0       	ldi	r18, 0x03	; 3
     9ea:	01 e0       	ldi	r16, 0x01	; 1
     9ec:	8e d1       	rcall	.+796    	; 0xd0a <Reg_Handler>
     9ee:	10 93 01 19 	sts	0x1901, r17
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	d1 e0       	ldi	r29, 0x01	; 1
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <main+0x84>
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
					{
						if (CurrTask->TaskStatus == TASK_RUN)
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	88 23       	and	r24, r24
     9fc:	19 f0       	breq	.+6      	; 0xa04 <main+0x82>
						  CurrTask->Task();
     9fe:	e8 81       	ld	r30, Y
     a00:	f9 81       	ldd	r31, Y+1	; 0x01
     a02:	09 95       	icall

						CurrTask++;
     a04:	24 96       	adiw	r28, 0x04	; 4

				for (;;)
				{
					TaskEntry_t* CurrTask = &Scheduler_TaskList[0];
					
					while (CurrTask != &Scheduler_TaskList[TotalTasks])
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	cc 30       	cpi	r28, 0x0C	; 12
     a0a:	d8 07       	cpc	r29, r24
     a0c:	a9 f7       	brne	.-22     	; 0x9f8 <main+0x76>
     a0e:	2c 97       	sbiw	r28, 0x0c	; 12
     a10:	fa cf       	rjmp	.-12     	; 0xa06 <main+0x84>

00000a12 <__vector_29>:
 */

volatile uint32_t epoch=0;

ISR(ADC_vect, ISR_BLOCK)
{
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	0b b6       	in	r0, 0x3b	; 59
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	1f 93       	push	r17
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
  static uint16_t timestamp_inc=0;

#define DOWNSAMPLE
#ifdef DOWNSAMPLE
  static uint8_t countdown=0;
  if (countdown>0) {
     a3e:	80 91 23 01 	lds	r24, 0x0123
     a42:	88 23       	and	r24, r24
     a44:	21 f0       	breq	.+8      	; 0xa4e <__vector_29+0x3c>
    countdown--; /* Don't do anything, just cycle until next sample ready. */
     a46:	81 50       	subi	r24, 0x01	; 1
     a48:	80 93 23 01 	sts	0x0123, r24
     a4c:	9b c0       	rjmp	.+310    	; 0xb84 <__vector_29+0x172>
  } else {
    countdown=downsample_countdown_max;
     a4e:	80 91 1a 01 	lds	r24, 0x011A
     a52:	80 93 23 01 	sts	0x0123, r24
#endif

#ifndef FAKEADC
    analog_value = ADC_GetResult();
     a56:	60 91 78 00 	lds	r22, 0x0078
     a5a:	70 91 79 00 	lds	r23, 0x0079
    fakeadc++;
    if (fakeadc>=(1<<10)) {
      fakeadc=0;
    }
#endif
    uint16_t tcnt3_copy = TCNT3; // grab early so it corresponds with time of sample
     a5e:	c0 91 94 00 	lds	r28, 0x0094
     a62:	d0 91 95 00 	lds	r29, 0x0095
    input_channel = ADC_GetChannel() & 0x03; // only low 2 bits... we're only using first 4 channels
     a66:	40 91 7c 00 	lds	r20, 0x007C

    //pack input channel into LSBs
    analog_value |= check_previous_mask;
    analog_value |= overflowed;        // set marker if necessary
     a6a:	80 91 19 01 	lds	r24, 0x0119
#endif
    uint16_t tcnt3_copy = TCNT3; // grab early so it corresponds with time of sample
    input_channel = ADC_GetChannel() & 0x03; // only low 2 bits... we're only using first 4 channels

    //pack input channel into LSBs
    analog_value |= check_previous_mask;
     a6e:	20 91 26 01 	lds	r18, 0x0126
     a72:	30 91 27 01 	lds	r19, 0x0127
     a76:	62 2b       	or	r22, r18
     a78:	73 2b       	or	r23, r19
    analog_value |= overflowed;        // set marker if necessary
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	68 2b       	or	r22, r24
     a7e:	79 2b       	or	r23, r25
    analog_value |= input_channel;     // low 2 bits set to input_channel
     a80:	43 70       	andi	r20, 0x03	; 3
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	64 2b       	or	r22, r20
     a86:	75 2b       	or	r23, r21

    check_previous_mask = ((analog_value>>2) & 0x30); // insert saved most LSBs, which are least likely to be correlated
     a88:	cb 01       	movw	r24, r22
     a8a:	96 95       	lsr	r25
     a8c:	87 95       	ror	r24
     a8e:	96 95       	lsr	r25
     a90:	87 95       	ror	r24
     a92:	80 73       	andi	r24, 0x30	; 48
     a94:	90 70       	andi	r25, 0x00	; 0
     a96:	90 93 27 01 	sts	0x0127, r25
     a9a:	80 93 26 01 	sts	0x0126, r24

    ADC_CHAN_IDX++;
     a9e:	80 91 17 01 	lds	r24, 0x0117
     aa2:	8f 5f       	subi	r24, 0xFF	; 255
     aa4:	80 93 17 01 	sts	0x0117, r24
    if ((ADC_CHAN_IDX) >= ADC_N_CHANS) {
     aa8:	90 91 18 01 	lds	r25, 0x0118
     aac:	89 17       	cp	r24, r25
     aae:	10 f0       	brcs	.+4      	; 0xab4 <__vector_29+0xa2>
      ADC_CHAN_IDX=0;
     ab0:	10 92 17 01 	sts	0x0117, r1
    }
    ADC_SetChannel( ADC_REFERENCE_AVCC | ADC_LEFT_ADJUSTED | ADC_CHANS[ADC_CHAN_IDX] );
     ab4:	e0 91 17 01 	lds	r30, 0x0117
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ef 52       	subi	r30, 0x2F	; 47
     abc:	f7 4e       	sbci	r31, 0xE7	; 231
     abe:	80 81       	ld	r24, Z
     ac0:	80 66       	ori	r24, 0x60	; 96
			 *
			 *  \param MUXMask  Mask comprising of an ADC channel number, reference mask and adjustment mask
			 */
			static inline void ADC_SetChannel(const uint8_t MUXMask)
			{
				ADMUX = MUXMask;
     ac2:	80 93 7c 00 	sts	0x007C, r24

    uint8_t send_framecount = 0;
    if (timestamp_inc>0) {
     ac6:	80 91 24 01 	lds	r24, 0x0124
     aca:	90 91 25 01 	lds	r25, 0x0125
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	39 f0       	breq	.+14     	; 0xae0 <__vector_29+0xce>
      timestamp_inc--;
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	90 93 25 01 	sts	0x0125, r25
     ad8:	80 93 24 01 	sts	0x0124, r24
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__vector_29+0xde>
    } else {
      timestamp_inc=250;
     ae0:	8a ef       	ldi	r24, 0xFA	; 250
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 25 01 	sts	0x0125, r25
     ae8:	80 93 24 01 	sts	0x0124, r24
      send_framecount = 1;
      analog_value |= FRAMECOUNT_COMING_MARKER; // set marker in data stream
     aec:	64 60       	ori	r22, 0x04	; 4
     aee:	11 e0       	ldi	r17, 0x01	; 1
    }

    /* Analog sample received, store it into the buffer */
    if (!Buffer_StoreElement(&Tx_Buffer, analog_value)) { // Get left 10 bits plus markers
     af0:	8b e5       	ldi	r24, 0x5B	; 91
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	45 d1       	rcall	.+650    	; 0xd80 <Buffer_StoreElement>
     af6:	88 23       	and	r24, r24
     af8:	19 f4       	brne	.+6      	; 0xb00 <__vector_29+0xee>
      // overflowed ring buffer
      overflowed = OVERFLOW_MARKER;
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	80 93 19 01 	sts	0x0119, r24
    }

#define SEND_FRAMECOUNT
#ifdef SEND_FRAMECOUNT
    if (send_framecount) {
     b00:	11 23       	and	r17, r17
     b02:	09 f4       	brne	.+2      	; 0xb06 <__vector_29+0xf4>
     b04:	3f c0       	rjmp	.+126    	; 0xb84 <__vector_29+0x172>
      // we are in an interrupt, so we don't need to worry about being interrupted
      Buffer_StoreElement(&Tx_Buffer, (uint16_t)(framecount_A & 0xFFFF));
     b06:	20 91 1b 01 	lds	r18, 0x011B
     b0a:	30 91 1c 01 	lds	r19, 0x011C
     b0e:	40 91 1d 01 	lds	r20, 0x011D
     b12:	50 91 1e 01 	lds	r21, 0x011E
     b16:	8b e5       	ldi	r24, 0x5B	; 91
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	b9 01       	movw	r22, r18
     b1c:	31 d1       	rcall	.+610    	; 0xd80 <Buffer_StoreElement>
      Buffer_StoreElement(&Tx_Buffer, (uint16_t)((framecount_A >> 16) & 0xFFFF));
     b1e:	20 91 1b 01 	lds	r18, 0x011B
     b22:	30 91 1c 01 	lds	r19, 0x011C
     b26:	40 91 1d 01 	lds	r20, 0x011D
     b2a:	50 91 1e 01 	lds	r21, 0x011E
     b2e:	9a 01       	movw	r18, r20
     b30:	44 27       	eor	r20, r20
     b32:	55 27       	eor	r21, r21
     b34:	8b e5       	ldi	r24, 0x5B	; 91
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	b9 01       	movw	r22, r18
     b3a:	22 d1       	rcall	.+580    	; 0xd80 <Buffer_StoreElement>
      Buffer_StoreElement(&Tx_Buffer, (uint16_t)(epoch & 0xFFFF));
     b3c:	20 91 1f 01 	lds	r18, 0x011F
     b40:	30 91 20 01 	lds	r19, 0x0120
     b44:	40 91 21 01 	lds	r20, 0x0121
     b48:	50 91 22 01 	lds	r21, 0x0122
     b4c:	8b e5       	ldi	r24, 0x5B	; 91
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	b9 01       	movw	r22, r18
     b52:	16 d1       	rcall	.+556    	; 0xd80 <Buffer_StoreElement>
      Buffer_StoreElement(&Tx_Buffer, (uint16_t)((epoch >> 16) & 0xFFFF));
     b54:	20 91 1f 01 	lds	r18, 0x011F
     b58:	30 91 20 01 	lds	r19, 0x0120
     b5c:	40 91 21 01 	lds	r20, 0x0121
     b60:	50 91 22 01 	lds	r21, 0x0122
     b64:	9a 01       	movw	r18, r20
     b66:	44 27       	eor	r20, r20
     b68:	55 27       	eor	r21, r21
     b6a:	8b e5       	ldi	r24, 0x5B	; 91
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	b9 01       	movw	r22, r18
     b70:	07 d1       	rcall	.+526    	; 0xd80 <Buffer_StoreElement>
      if (!Buffer_StoreElement(&Tx_Buffer, tcnt3_copy)) {
     b72:	8b e5       	ldi	r24, 0x5B	; 91
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	be 01       	movw	r22, r28
     b78:	03 d1       	rcall	.+518    	; 0xd80 <Buffer_StoreElement>
     b7a:	88 23       	and	r24, r24
     b7c:	19 f4       	brne	.+6      	; 0xb84 <__vector_29+0x172>
        // overflowed ring buffer
        overflowed = OVERFLOW_MARKER;
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	80 93 19 01 	sts	0x0119, r24

#ifdef DOWNSAMPLE
  }
#endif

}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	bf 91       	pop	r27
     b8e:	af 91       	pop	r26
     b90:	9f 91       	pop	r25
     b92:	8f 91       	pop	r24
     b94:	7f 91       	pop	r23
     b96:	6f 91       	pop	r22
     b98:	5f 91       	pop	r21
     b9a:	4f 91       	pop	r20
     b9c:	3f 91       	pop	r19
     b9e:	2f 91       	pop	r18
     ba0:	1f 91       	pop	r17
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <USB_GetDescriptor>:
 *  to the USB library. When the device recieves a Get Descriptor request on the control endpoint, this function
 *  is called so that the descriptor details can be passed back and the appropriate descriptor sent back to the
 *  USB host.
 */
uint16_t USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
     bb0:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     bb2:	92 30       	cpi	r25, 0x02	; 2
     bb4:	49 f0       	breq	.+18     	; 0xbc8 <USB_GetDescriptor+0x18>
     bb6:	93 30       	cpi	r25, 0x03	; 3
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <USB_GetDescriptor+0x22>
     bba:	91 30       	cpi	r25, 0x01	; 1
     bbc:	f9 f4       	brne	.+62     	; 0xbfc <USB_GetDescriptor+0x4c>
     bbe:	e8 e9       	ldi	r30, 0x98	; 152
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	22 e1       	ldi	r18, 0x12	; 18
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	1e c0       	rjmp	.+60     	; 0xc04 <USB_GetDescriptor+0x54>
     bc8:	ea ea       	ldi	r30, 0xAA	; 170
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	27 e2       	ldi	r18, 0x27	; 39
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	19 c0       	rjmp	.+50     	; 0xc04 <USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = DESCRIPTOR_ADDRESS(ConfigurationDescriptor);
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	49 f0       	breq	.+18     	; 0xbe8 <USB_GetDescriptor+0x38>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	18 f0       	brcs	.+6      	; 0xbe0 <USB_GetDescriptor+0x30>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	79 f4       	brne	.+30     	; 0xbfc <USB_GetDescriptor+0x4c>
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = DESCRIPTOR_ADDRESS(LanguageString);
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     be0:	e1 ed       	ldi	r30, 0xD1	; 209
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	84 91       	lpm	r24, Z+
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = DESCRIPTOR_ADDRESS(ManufacturerString);
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     be8:	e5 ed       	ldi	r30, 0xD5	; 213
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	84 91       	lpm	r24, Z+
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = DESCRIPTOR_ADDRESS(ProductString);
					Size    = pgm_read_byte(&ProductString.Header.Size);
     bf0:	e9 ee       	ldi	r30, 0xE9	; 233
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	84 91       	lpm	r24, Z+
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <USB_GetDescriptor+0x54>
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     c04:	ed 93       	st	X+, r30
     c06:	fc 93       	st	X, r31
	return Size;
}
     c08:	c9 01       	movw	r24, r18
     c0a:	08 95       	ret

00000c0c <Handler_Init>:
{
    unsigned char lcv;

    for(lcv=0;lcv<HANDLER_MAX;lcv++)    /* Initialize masks to FALSE */
    {
        mask[lcv] = FALSE;
     c0c:	10 92 dd 18 	sts	0x18DD, r1
     c10:	10 92 de 18 	sts	0x18DE, r1
     c14:	10 92 df 18 	sts	0x18DF, r1
     c18:	10 92 e0 18 	sts	0x18E0, r1
    }
    TIMSK3 |= (1 << TOIE3);
     c1c:	e1 e7       	ldi	r30, 0x71	; 113
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	80 83       	st	Z, r24
}
     c26:	08 95       	ret

00000c28 <__vector_35>:
Description: The interrupt handler function of the timer3 interrupt.
Arguments: none
Return Values: none
*/
ISR(TIMER3_OVF_vect, ISR_BLOCK)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
     c5a:	91 ee       	ldi	r25, 0xE1	; 225
     c5c:	e9 2e       	mov	r14, r25
     c5e:	98 e1       	ldi	r25, 0x18	; 24
     c60:	f9 2e       	mov	r15, r25
     c62:	05 ed       	ldi	r16, 0xD5	; 213
     c64:	18 e1       	ldi	r17, 0x18	; 24
     c66:	c0 e0       	ldi	r28, 0x00	; 0
     c68:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char lcv;

    for(lcv=0;lcv<HANDLER_MAX;lcv++)              /* check and act on all vectors */
    {
        if(mask[lcv]==TRUE)                       /* if int enabled check count */
     c6a:	fe 01       	movw	r30, r28
     c6c:	e3 52       	subi	r30, 0x23	; 35
     c6e:	f7 4e       	sbci	r31, 0xE7	; 231
     c70:	80 81       	ld	r24, Z
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	39 f5       	brne	.+78     	; 0xcc4 <__vector_35+0x9c>
        {
            count[lcv]--;
     c76:	fe 01       	movw	r30, r28
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ef 50       	subi	r30, 0x0F	; 15
     c82:	f7 4e       	sbci	r31, 0xE7	; 231
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	a2 81       	ldd	r26, Z+2	; 0x02
     c8a:	b3 81       	ldd	r27, Z+3	; 0x03
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	a1 09       	sbc	r26, r1
     c90:	b1 09       	sbc	r27, r1
     c92:	80 83       	st	Z, r24
     c94:	91 83       	std	Z+1, r25	; 0x01
     c96:	a2 83       	std	Z+2, r26	; 0x02
     c98:	b3 83       	std	Z+3, r27	; 0x03
            if(count[lcv]==0)                     /* if count=0, perform function call and reset */
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ca0:	b3 81       	ldd	r27, Z+3	; 0x03
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	a1 05       	cpc	r26, r1
     ca6:	b1 05       	cpc	r27, r1
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <__vector_35+0x9c>
            {
                count[lcv]=start_count[lcv];
     caa:	d7 01       	movw	r26, r14
     cac:	2d 91       	ld	r18, X+
     cae:	3d 91       	ld	r19, X+
     cb0:	4d 91       	ld	r20, X+
     cb2:	5c 91       	ld	r21, X
     cb4:	20 83       	st	Z, r18
     cb6:	31 83       	std	Z+1, r19	; 0x01
     cb8:	42 83       	std	Z+2, r20	; 0x02
     cba:	53 83       	std	Z+3, r21	; 0x03
                (*p_handler_func[lcv]) ();
     cbc:	d8 01       	movw	r26, r16
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	09 95       	icall
     cc4:	21 96       	adiw	r28, 0x01	; 1
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	e8 0e       	add	r14, r24
     ccc:	f9 1e       	adc	r15, r25
     cce:	0e 5f       	subi	r16, 0xFE	; 254
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
*/
ISR(TIMER3_OVF_vect, ISR_BLOCK)
{
    unsigned char lcv;

    for(lcv=0;lcv<HANDLER_MAX;lcv++)              /* check and act on all vectors */
     cd2:	c4 30       	cpi	r28, 0x04	; 4
     cd4:	d1 05       	cpc	r29, r1
     cd6:	49 f6       	brne	.-110    	; 0xc6a <__vector_35+0x42>
                count[lcv]=start_count[lcv];
                (*p_handler_func[lcv]) ();
            }
        }
    }
}
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	0f 90       	pop	r0
     cfe:	0b be       	out	0x3b, r0	; 59
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <Reg_Handler>:
            unsigned char priority = priority of the interrupt request
            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
Return Values: none
*/
void Reg_Handler(void* fptr,unsigned long s_cnt,unsigned char priority,unsigned char msk)
{
     d0a:	0f 93       	push	r16
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	a2 2f       	mov	r26, r18
    mask[priority]=FALSE;               /* disable while modifying vector */
     d12:	b0 e0       	ldi	r27, 0x00	; 0
    p_handler_func[priority]=fptr;      /* set function pointer */
     d14:	fd 01       	movw	r30, r26
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	eb 52       	subi	r30, 0x2B	; 43
     d1c:	f7 4e       	sbci	r31, 0xE7	; 231
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
    start_count[priority]=s_cnt;        /* set start count */
     d22:	fd 01       	movw	r30, r26
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	cf 01       	movw	r24, r30
     d2e:	8f 51       	subi	r24, 0x1F	; 31
     d30:	97 4e       	sbci	r25, 0xE7	; 231
     d32:	ec 01       	movw	r28, r24
     d34:	48 83       	st	Y, r20
     d36:	59 83       	std	Y+1, r21	; 0x01
     d38:	6a 83       	std	Y+2, r22	; 0x02
     d3a:	7b 83       	std	Y+3, r23	; 0x03
    count[priority]=s_cnt;              /* set count */
     d3c:	ef 50       	subi	r30, 0x0F	; 15
     d3e:	f7 4e       	sbci	r31, 0xE7	; 231
     d40:	40 83       	st	Z, r20
     d42:	51 83       	std	Z+1, r21	; 0x01
     d44:	62 83       	std	Z+2, r22	; 0x02
     d46:	73 83       	std	Z+3, r23	; 0x03
    mask[priority]=msk;                 /* set interrupt mask */
     d48:	a3 52       	subi	r26, 0x23	; 35
     d4a:	b7 4e       	sbci	r27, 0xE7	; 231
     d4c:	0c 93       	st	X, r16
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <Buffer_Initialize>:
*/

#include "RingBuff.h"

void Buffer_Initialize(RingBuff_t* Buffer)
{
     d56:	fc 01       	movw	r30, r24
	BUFF_ATOMIC_BLOCK
     d58:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d5a:	f8 94       	cli
	{
		Buffer->InPtr    = (RingBuff_Data_t*)&Buffer->Buffer;
     d5c:	df 01       	movw	r26, r30
     d5e:	a0 59       	subi	r26, 0x90	; 144
     d60:	b8 4e       	sbci	r27, 0xE8	; 232
     d62:	11 96       	adiw	r26, 0x01	; 1
     d64:	fc 93       	st	X, r31
     d66:	ee 93       	st	-X, r30
		Buffer->OutPtr   = (RingBuff_Data_t*)&Buffer->Buffer;
     d68:	df 01       	movw	r26, r30
     d6a:	ae 58       	subi	r26, 0x8E	; 142
     d6c:	b8 4e       	sbci	r27, 0xE8	; 232
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	fc 93       	st	X, r31
     d72:	ee 93       	st	-X, r30
		Buffer->Elements = 0;
     d74:	ec 58       	subi	r30, 0x8C	; 140
     d76:	f8 4e       	sbci	r31, 0xE8	; 232
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d7c:	8f bf       	out	0x3f, r24	; 63
	}
}
     d7e:	08 95       	ret

00000d80 <Buffer_StoreElement>:

uint8_t Buffer_StoreElement(RingBuff_t* Buffer, RingBuff_Data_t Data)
{
     d80:	1f 93       	push	r17
     d82:	ac 01       	movw	r20, r24
  uint8_t notfull=1;
	BUFF_ATOMIC_BLOCK
     d84:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d86:	f8 94       	cli
	{
	#if defined(BUFF_DROPOLD)
		if (Buffer->Elements == BUFF_LENGTH)
     d88:	fc 01       	movw	r30, r24
     d8a:	ec 58       	subi	r30, 0x8C	; 140
     d8c:	f8 4e       	sbci	r31, 0xE8	; 232
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	88 5b       	subi	r24, 0xB8	; 184
     d94:	9b 40       	sbci	r25, 0x0B	; 11
     d96:	a1 f4       	brne	.+40     	; 0xdc0 <Buffer_StoreElement+0x40>
		{
			Buffer->OutPtr++;
     d98:	fa 01       	movw	r30, r20
     d9a:	ee 58       	subi	r30, 0x8E	; 142
     d9c:	f8 4e       	sbci	r31, 0xE8	; 232
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	02 96       	adiw	r24, 0x02	; 2
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
                        notfull=0;

			if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
     da8:	20 81       	ld	r18, Z
     daa:	31 81       	ldd	r19, Z+1	; 0x01
     dac:	ca 01       	movw	r24, r20
     dae:	80 59       	subi	r24, 0x90	; 144
     db0:	98 4e       	sbci	r25, 0xE8	; 232
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	11 f4       	brne	.+4      	; 0xdbc <Buffer_StoreElement+0x3c>
			  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
     db8:	51 83       	std	Z+1, r21	; 0x01
     dba:	40 83       	st	Z, r20
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <Buffer_StoreElement+0x4c>
		}
		else
		{
			Buffer->Elements++;
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	80 83       	st	Z, r24
     dca:	21 e0       	ldi	r18, 0x01	; 1
		  Buffer->Elements++;
	#elif defined(BUFF_NODROPCHECK)
		  Buffer->Elements++;
	#endif

		*(Buffer->InPtr) = Data;
     dcc:	da 01       	movw	r26, r20
     dce:	a0 59       	subi	r26, 0x90	; 144
     dd0:	b8 4e       	sbci	r27, 0xE8	; 232
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	71 83       	std	Z+1, r23	; 0x01
     dda:	60 83       	st	Z, r22
		Buffer->InPtr++;
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	11 97       	sbiw	r26, 0x01	; 1
     de2:	02 96       	adiw	r24, 0x02	; 2
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	9c 93       	st	X, r25
     de8:	8e 93       	st	-X, r24

		if (Buffer->InPtr == &Buffer->Buffer[BUFF_LENGTH])
     dea:	ed 91       	ld	r30, X+
     dec:	fc 91       	ld	r31, X
     dee:	11 97       	sbiw	r26, 0x01	; 1
     df0:	ea 17       	cp	r30, r26
     df2:	fb 07       	cpc	r31, r27
     df4:	11 f4       	brne	.+4      	; 0xdfa <Buffer_StoreElement+0x7a>
		  Buffer->InPtr = (RingBuff_Data_t*)&Buffer->Buffer;
     df6:	51 83       	std	Z+1, r21	; 0x01
     df8:	40 83       	st	Z, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     dfa:	1f bf       	out	0x3f, r17	; 63

	}
        return notfull;
}
     dfc:	82 2f       	mov	r24, r18
     dfe:	1f 91       	pop	r17
     e00:	08 95       	ret

00000e02 <Buffer_GetElement>:

RingBuff_Data_t Buffer_GetElement(RingBuff_t* Buffer)
{
     e02:	1f 93       	push	r17
     e04:	ac 01       	movw	r20, r24
	RingBuff_Data_t BuffData;

	BUFF_ATOMIC_BLOCK
     e06:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e08:	f8 94       	cli
		  return 0;
#elif !defined(BUFF_NOEMPTYCHECK)
	#error No empty buffer check behaviour specified.
#endif

		BuffData = *(Buffer->OutPtr);
     e0a:	dc 01       	movw	r26, r24
     e0c:	ae 58       	subi	r26, 0x8E	; 142
     e0e:	b8 4e       	sbci	r27, 0xE8	; 232
     e10:	ed 91       	ld	r30, X+
     e12:	fc 91       	ld	r31, X
     e14:	11 97       	sbiw	r26, 0x01	; 1
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01

		Buffer->OutPtr++;
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	02 96       	adiw	r24, 0x02	; 2
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	9c 93       	st	X, r25
     e26:	8e 93       	st	-X, r24
		Buffer->Elements--;
     e28:	fa 01       	movw	r30, r20
     e2a:	ec 58       	subi	r30, 0x8C	; 140
     e2c:	f8 4e       	sbci	r31, 0xE8	; 232
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24

		if (Buffer->OutPtr == &Buffer->Buffer[BUFF_LENGTH])
     e38:	2d 91       	ld	r18, X+
     e3a:	3c 91       	ld	r19, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	ca 01       	movw	r24, r20
     e40:	80 59       	subi	r24, 0x90	; 144
     e42:	98 4e       	sbci	r25, 0xE8	; 232
     e44:	28 17       	cp	r18, r24
     e46:	39 07       	cpc	r19, r25
     e48:	19 f4       	brne	.+6      	; 0xe50 <Buffer_GetElement+0x4e>
		  Buffer->OutPtr = (RingBuff_Data_t*)&Buffer->Buffer;
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	5c 93       	st	X, r21
     e4e:	4e 93       	st	-X, r20
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e50:	1f bf       	out	0x3f, r17	; 63
	}

	return BuffData;
}
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <USB_ResetInterface>:
	UHWCON &= ~(1 << UIDE);
	#endif
}

void USB_ResetInterface(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <USB_ResetInterface+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
	USB_INT_DisableAllInterrupts();
     e62:	75 d2       	rcall	.+1258   	; 0x134e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e64:	7c d2       	rcall	.+1272   	; 0x135e <USB_INT_ClearAllInterrupts>

	USB_IsConnected          = false;
     e66:	10 92 08 19 	sts	0x1908, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState            = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber  = 0;
     e6a:	10 92 06 19 	sts	0x1906, r1
	USB_IsSuspended          = false;
     e6e:	10 92 09 19 	sts	0x1909, r1
	USB_RemoteWakeupEnabled  = false;
     e72:	10 92 05 19 	sts	0x1905, r1
	USB_CurrentlySelfPowered = false;
     e76:	10 92 04 19 	sts	0x1904, r1
	{
		#if defined(USB_MODIFIED_FULL_CONTROLLER)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
     e7a:	84 e1       	ldi	r24, 0x14	; 20
     e7c:	89 bd       	out	0x29, r24	; 41
     e7e:	89 b5       	in	r24, 0x29	; 41
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
     e84:	09 b4       	in	r0, 0x29	; 41
     e86:	00 fe       	sbrs	r0, 0
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <USB_ResetInterface+0x2c>
	}
	
	USB_Interface_Reset();
     e8a:	80 91 d8 00 	lds	r24, 0x00D8
     e8e:	98 2f       	mov	r25, r24
     e90:	9f 77       	andi	r25, 0x7F	; 127
     e92:	90 93 d8 00 	sts	0x00D8, r25
     e96:	80 68       	ori	r24, 0x80	; 128
     e98:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     e9c:	80 91 d7 00 	lds	r24, 0x00D7
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	80 93 d7 00 	sts	0x00D7, r24
	
	USB_CLK_Unfreeze();
     ea6:	80 91 d8 00 	lds	r24, 0x00D8
     eaa:	8f 7d       	andi	r24, 0xDF	; 223
     eac:	80 93 d8 00 	sts	0x00D8, r24
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
		  USB_Device_SetLowSpeed();
		else
		  USB_Device_SetHighSpeed();
     eb0:	80 91 e0 00 	lds	r24, 0x00E0
     eb4:	8b 7f       	andi	r24, 0xFB	; 251
     eb6:	80 93 e0 00 	sts	0x00E0, r24
		  
		USB_INT_Enable(USB_INT_VBUS);
     eba:	80 91 d8 00 	lds	r24, 0x00D8
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 93 d8 00 	sts	0x00D8, r24
	#if (defined(USB_CAN_BE_DEVICE) && !defined(FIXED_CONTROL_ENDPOINT_SIZE))
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		USB_Descriptor_Device_t* DeviceDescriptorPtr;

		if (USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr) != NO_DESCRIPTOR)
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	ae 01       	movw	r20, r28
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	6f de       	rcall	.-802    	; 0xbb0 <USB_GetDescriptor>
     ed2:	89 2b       	or	r24, r25
     ed4:	31 f0       	breq	.+12     	; 0xee2 <USB_ResetInterface+0x8a>
			#if defined(USE_RAM_DESCRIPTORS)
				USB_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
			#elif defined(USE_EEPROM_DESCRIPTORS)
				USB_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
			#else
				USB_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	37 96       	adiw	r30, 0x07	; 7
     edc:	e4 91       	lpm	r30, Z+
     ede:	e0 93 0e 01 	sts	0x010E, r30
			#endif
		}
	}
	#endif

	USB_Attach();
     ee2:	80 91 e0 00 	lds	r24, 0x00E0
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)	
	USB_INT_Enable(USB_INT_SUSPEND);
     eec:	80 91 e2 00 	lds	r24, 0x00E2
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);	
     ef6:	80 91 e2 00 	lds	r24, 0x00E2
     efa:	88 60       	ori	r24, 0x08	; 8
     efc:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <USB_ShutDown>:
	sei();
}

void USB_ShutDown(void)
{
	if (USB_IsConnected)
     f0a:	80 91 08 19 	lds	r24, 0x1908
     f0e:	88 23       	and	r24, r24
     f10:	09 f0       	breq	.+2      	; 0xf14 <USB_ShutDown+0xa>
	  RAISE_EVENT(USB_Disconnect);
     f12:	f9 d2       	rcall	.+1522   	; 0x1506 <USB_Event_Stub>

	USB_Detach();
     f14:	80 91 e0 00 	lds	r24, 0x00E0
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	80 93 e0 00 	sts	0x00E0, r24

	USB_INT_DisableAllInterrupts();
     f1e:	17 d2       	rcall	.+1070   	; 0x134e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f20:	1e d2       	rcall	.+1084   	; 0x135e <USB_INT_ClearAllInterrupts>

	USB_IsConnected   = false;
     f22:	10 92 08 19 	sts	0x1908, r1
	USB_IsInitialized = false;
     f26:	10 92 07 19 	sts	0x1907, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber = 0;
     f2a:	10 92 06 19 	sts	0x1906, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif

	USB_Interface_Disable();
     f2e:	80 91 d8 00 	lds	r24, 0x00D8
     f32:	8f 77       	andi	r24, 0x7F	; 127
     f34:	80 93 d8 00 	sts	0x00D8, r24
	USB_PLL_Off();
     f38:	19 bc       	out	0x29, r1	; 41
	
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USB_OTGPAD_Off();
     f3a:	80 91 d8 00 	lds	r24, 0x00D8
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	80 93 d8 00 	sts	0x00D8, r24
	#endif

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif
}
     f44:	08 95       	ret

00000f46 <USB_Init>:
               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
	USB_ShutDown();
     f46:	e1 df       	rcall	.-62     	; 0xf0a <USB_ShutDown>
	#if defined(USB_CAN_BE_HOST)
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
	#endif
	
	#if defined(USB_DEVICE_ONLY) && defined(USB_FULL_CONTROLLER)
	UHWCON |= (1 << UIMOD);
     f48:	e7 ed       	ldi	r30, 0xD7	; 215
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	80 83       	st	Z, r24
		RAISE_EVENT(USB_PowerOnFail, POWERON_ERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     f52:	82 df       	rcall	.-252    	; 0xe58 <USB_ResetInterface>

	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USB_OTGPAD_On();
     f54:	e8 ed       	ldi	r30, 0xD8	; 216
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 61       	ori	r24, 0x10	; 16
     f5c:	80 83       	st	Z, r24
	#endif

	USB_IsInitialized = true;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 07 19 	sts	0x1907, r24

	sei();
     f64:	78 94       	sei
}
     f66:	08 95       	ret

00000f68 <Endpoint_ConfigureEndpoint>:
#endif

#if !defined(STATIC_ENDPOINT_CONFIGURATION)
bool Endpoint_ConfigureEndpoint(const uint8_t  Number, const uint8_t Type, const uint8_t Direction,
			                    const uint16_t Size, const uint8_t Banks)
{
     f68:	0f 93       	push	r16
	Endpoint_SelectEndpoint(Number);
     f6a:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
     f6e:	80 91 eb 00 	lds	r24, 0x00EB
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	80 93 eb 00 	sts	0x00EB, r24

	UECFG1X = 0;	
     f78:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = ((Type << EPTYPE0) | Direction);
     f7c:	62 95       	swap	r22
     f7e:	66 0f       	add	r22, r22
     f80:	66 0f       	add	r22, r22
     f82:	60 7c       	andi	r22, 0xC0	; 192
     f84:	64 2b       	or	r22, r20
     f86:	60 93 ec 00 	sts	0x00EC, r22
			
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYSINLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				if (Bytes <= 8)
     f8a:	29 30       	cpi	r18, 0x09	; 9
     f8c:	31 05       	cpc	r19, r1
     f8e:	10 f4       	brcc	.+4      	; 0xf94 <Endpoint_ConfigureEndpoint+0x2c>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	15 c0       	rjmp	.+42     	; 0xfbe <Endpoint_ConfigureEndpoint+0x56>
				  return (0 << EPSIZE0);
				else if (Bytes <= 16)
     f94:	21 31       	cpi	r18, 0x11	; 17
     f96:	31 05       	cpc	r19, r1
     f98:	10 f4       	brcc	.+4      	; 0xf9e <Endpoint_ConfigureEndpoint+0x36>
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	10 c0       	rjmp	.+32     	; 0xfbe <Endpoint_ConfigureEndpoint+0x56>
				  return (1 << EPSIZE0);
				else if (Bytes <= 32)
     f9e:	21 32       	cpi	r18, 0x21	; 33
     fa0:	31 05       	cpc	r19, r1
     fa2:	10 f4       	brcc	.+4      	; 0xfa8 <Endpoint_ConfigureEndpoint+0x40>
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <Endpoint_ConfigureEndpoint+0x56>
				  return (2 << EPSIZE0);
				#if defined(USB_LIMITED_CONTROLLER)
				else
				  return (3 << EPSIZE0);
				#else
				else if (Bytes <= 64)
     fa8:	21 34       	cpi	r18, 0x41	; 65
     faa:	31 05       	cpc	r19, r1
     fac:	10 f4       	brcc	.+4      	; 0xfb2 <Endpoint_ConfigureEndpoint+0x4a>
     fae:	80 e3       	ldi	r24, 0x30	; 48
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <Endpoint_ConfigureEndpoint+0x56>
				  return (3 << EPSIZE0);
				else if (Bytes <= 128)
     fb2:	21 38       	cpi	r18, 0x81	; 129
     fb4:	31 05       	cpc	r19, r1
     fb6:	10 f0       	brcs	.+4      	; 0xfbc <Endpoint_ConfigureEndpoint+0x54>
     fb8:	80 e5       	ldi	r24, 0x50	; 80
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <Endpoint_ConfigureEndpoint+0x56>
     fbc:	80 e4       	ldi	r24, 0x40	; 64
	UECFG1X = ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size));
     fbe:	02 60       	ori	r16, 0x02	; 2
     fc0:	80 2b       	or	r24, r16
     fc2:	80 93 ed 00 	sts	0x00ED, r24

	return Endpoint_IsConfigured();
     fc6:	80 91 ee 00 	lds	r24, 0x00EE
}
     fca:	88 1f       	adc	r24, r24
     fcc:	88 27       	eor	r24, r24
     fce:	88 1f       	adc	r24, r24
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <Endpoint_ClearEndpoints>:
}
#endif

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     fd4:	10 92 f4 00 	sts	0x00F4, r1
     fd8:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
     fda:	90 93 e9 00 	sts	0x00E9, r25
		UEIENX = 0;
     fde:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
     fe2:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
     fe6:	80 91 ed 00 	lds	r24, 0x00ED
     fea:	8d 7f       	andi	r24, 0xFD	; 253
     fec:	80 93 ed 00 	sts	0x00ED, r24
		Endpoint_DisableEndpoint();
     ff0:	80 91 eb 00 	lds	r24, 0x00EB
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	80 93 eb 00 	sts	0x00EB, r24

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ffa:	9f 5f       	subi	r25, 0xFF	; 255
     ffc:	97 30       	cpi	r25, 0x07	; 7
     ffe:	69 f7       	brne	.-38     	; 0xfda <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
    1000:	08 95       	ret

00001002 <USB_Device_ProcessControlPacket>:
uint8_t USB_ConfigurationNumber;
bool    USB_RemoteWakeupEnabled;
bool    USB_CurrentlySelfPowered;

void USB_Device_ProcessControlPacket(void)
{
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <USB_Device_ProcessControlPacket+0xa>
    100c:	00 d0       	rcall	.+0      	; 0x100e <USB_Device_ProcessControlPacket+0xc>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
		/* Inline Functions: */
			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1012:	60 91 f1 00 	lds	r22, 0x00F1
    1016:	50 91 f1 00 	lds	r21, 0x00F1
	uint8_t bmRequestType  = Endpoint_Read_Byte();
	uint8_t bRequest       = Endpoint_Read_Byte();
	bool    RequestHandled = false;	
	
	switch (bRequest)
    101a:	55 30       	cpi	r21, 0x05	; 5
    101c:	09 f4       	brne	.+2      	; 0x1020 <USB_Device_ProcessControlPacket+0x1e>
    101e:	94 c0       	rjmp	.+296    	; 0x1148 <USB_Device_ProcessControlPacket+0x146>
    1020:	56 30       	cpi	r21, 0x06	; 6
    1022:	48 f4       	brcc	.+18     	; 0x1036 <USB_Device_ProcessControlPacket+0x34>
    1024:	51 30       	cpi	r21, 0x01	; 1
    1026:	09 f4       	brne	.+2      	; 0x102a <USB_Device_ProcessControlPacket+0x28>
    1028:	4a c0       	rjmp	.+148    	; 0x10be <USB_Device_ProcessControlPacket+0xbc>
    102a:	51 30       	cpi	r21, 0x01	; 1
    102c:	70 f0       	brcs	.+28     	; 0x104a <USB_Device_ProcessControlPacket+0x48>
    102e:	53 30       	cpi	r21, 0x03	; 3
    1030:	09 f0       	breq	.+2      	; 0x1034 <USB_Device_ProcessControlPacket+0x32>
    1032:	5c c1       	rjmp	.+696    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
    1034:	44 c0       	rjmp	.+136    	; 0x10be <USB_Device_ProcessControlPacket+0xbc>
    1036:	58 30       	cpi	r21, 0x08	; 8
    1038:	09 f4       	brne	.+2      	; 0x103c <USB_Device_ProcessControlPacket+0x3a>
    103a:	16 c1       	rjmp	.+556    	; 0x1268 <USB_Device_ProcessControlPacket+0x266>
    103c:	59 30       	cpi	r21, 0x09	; 9
    103e:	09 f4       	brne	.+2      	; 0x1042 <USB_Device_ProcessControlPacket+0x40>
    1040:	2e c1       	rjmp	.+604    	; 0x129e <USB_Device_ProcessControlPacket+0x29c>
    1042:	56 30       	cpi	r21, 0x06	; 6
    1044:	09 f0       	breq	.+2      	; 0x1048 <USB_Device_ProcessControlPacket+0x46>
    1046:	52 c1       	rjmp	.+676    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
    1048:	9a c0       	rjmp	.+308    	; 0x117e <USB_Device_ProcessControlPacket+0x17c>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    104a:	60 38       	cpi	r22, 0x80	; 128
    104c:	19 f0       	breq	.+6      	; 0x1054 <USB_Device_ProcessControlPacket+0x52>
    104e:	62 38       	cpi	r22, 0x82	; 130
    1050:	09 f0       	breq	.+2      	; 0x1054 <USB_Device_ProcessControlPacket+0x52>
    1052:	4c c1       	rjmp	.+664    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
			/** Discards two bytes from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline void Endpoint_Discard_Word(void)
			{
				uint8_t Dummy;
				
				Dummy = UEDATX;
    1054:	80 91 f1 00 	lds	r24, 0x00F1
				Dummy = UEDATX;
    1058:	80 91 f1 00 	lds	r24, 0x00F1
		/* Inline Functions: */
			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    105c:	80 91 f1 00 	lds	r24, 0x00F1

	Endpoint_Discard_Word();

	uint8_t wIndex_LSB = Endpoint_Read_Byte();
	
	switch (bmRequestType)
    1060:	60 38       	cpi	r22, 0x80	; 128
    1062:	21 f0       	breq	.+8      	; 0x106c <USB_Device_ProcessControlPacket+0x6a>
    1064:	62 38       	cpi	r22, 0x82	; 130
    1066:	51 f0       	breq	.+20     	; 0x107c <USB_Device_ProcessControlPacket+0x7a>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <USB_Device_ProcessControlPacket+0x92>
    106c:	90 91 04 19 	lds	r25, 0x1904
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			
			if (USB_RemoteWakeupEnabled)
    1070:	80 91 05 19 	lds	r24, 0x1905
    1074:	88 23       	and	r24, r24
    1076:	71 f0       	breq	.+28     	; 0x1094 <USB_Device_ProcessControlPacket+0x92>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1078:	92 60       	ori	r25, 0x02	; 2
    107a:	0c c0       	rjmp	.+24     	; 0x1094 <USB_Device_ProcessControlPacket+0x92>
			
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint(wIndex_LSB);
    107c:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
    1080:	80 91 eb 00 	lds	r24, 0x00EB
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	25 e0       	ldi	r18, 0x05	; 5
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	2a 95       	dec	r18
    108e:	e1 f7       	brne	.-8      	; 0x1088 <USB_Device_ProcessControlPacket+0x86>
    1090:	98 2f       	mov	r25, r24
    1092:	91 70       	andi	r25, 0x01	; 1

			break;
	}
	
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
    1094:	10 92 e9 00 	sts	0x00E9, r1
	Endpoint_ClearSetupReceived();
    1098:	80 91 e8 00 	lds	r24, 0x00E8
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	80 93 e8 00 	sts	0x00E8, r24
			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
			 *  direction endpoints.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    10a2:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    10a6:	10 92 f1 00 	sts	0x00F1, r1
	Endpoint_Write_Word_LE(CurrentStatus);

	Endpoint_ClearSetupIN();
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
    10b0:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsSetupOUTReceived()));
    10b4:	80 91 e8 00 	lds	r24, 0x00E8
    10b8:	82 ff       	sbrs	r24, 2
    10ba:	fc cf       	rjmp	.-8      	; 0x10b4 <USB_Device_ProcessControlPacket+0xb2>
    10bc:	ea c0       	rjmp	.+468    	; 0x1292 <USB_Device_ProcessControlPacket+0x290>

			break;
#if !defined(NO_CLEARSET_FEATURE_REQUEST)
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT))
    10be:	62 30       	cpi	r22, 0x02	; 2
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <USB_Device_ProcessControlPacket+0xc2>
    10c2:	14 c1       	rjmp	.+552    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
    10c4:	80 91 f1 00 	lds	r24, 0x00F1
				Data |= (((uint16_t)UEDATX) << 8);
    10c8:	40 91 f1 00 	lds	r20, 0x00F1
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
    10cc:	70 91 f1 00 	lds	r23, 0x00F1
				Data |= (((uint16_t)UEDATX) << 8);
    10d0:	60 91 f1 00 	lds	r22, 0x00F1
	uint16_t wIndex = Endpoint_Read_Word_LE();
	
	switch (bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		case REQREC_ENDPOINT:
			if (wValue == FEATURE_ENDPOINT_HALT)
    10d4:	34 2f       	mov	r19, r20
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	28 2b       	or	r18, r24
    10dc:	39 2b       	or	r19, r25
    10de:	23 2b       	or	r18, r19
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <USB_Device_ProcessControlPacket+0xe2>
    10e2:	06 c1       	rjmp	.+524    	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
			{
				uint8_t EndpointIndex = (wIndex & ENDPOINT_EPNUM_MASK);
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	27 2f       	mov	r18, r23
    10e8:	28 2b       	or	r18, r24
    10ea:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex != ENDPOINT_CONTROLEP)
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <USB_Device_ProcessControlPacket+0xee>
    10ee:	00 c1       	rjmp	.+512    	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
				{
					Endpoint_SelectEndpoint(EndpointIndex);
    10f0:	20 93 e9 00 	sts	0x00E9, r18

					if (Endpoint_IsEnabled())
    10f4:	80 91 eb 00 	lds	r24, 0x00EB
    10f8:	80 ff       	sbrs	r24, 0
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <USB_Device_ProcessControlPacket+0x130>
					{				
						if (bRequest == REQ_ClearFeature)
    10fc:	51 30       	cpi	r21, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <USB_Device_ProcessControlPacket+0x126>
						{
							Endpoint_ClearStall();
    1100:	80 91 eb 00 	lds	r24, 0x00EB
    1104:	80 61       	ori	r24, 0x10	; 16
    1106:	80 93 eb 00 	sts	0x00EB, r24
							Endpoint_ResetFIFO(EndpointIndex);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <USB_Device_ProcessControlPacket+0x112>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	2a 95       	dec	r18
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <USB_Device_ProcessControlPacket+0x10e>
    1118:	80 93 ea 00 	sts	0x00EA, r24
    111c:	10 92 ea 00 	sts	0x00EA, r1
							Endpoint_ResetDataToggle();
    1120:	80 91 eb 00 	lds	r24, 0x00EB
    1124:	88 60       	ori	r24, 0x08	; 8
    1126:	03 c0       	rjmp	.+6      	; 0x112e <USB_Device_ProcessControlPacket+0x12c>
						}
						else
						{
							Endpoint_StallTransaction();						
    1128:	80 91 eb 00 	lds	r24, 0x00EB
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	80 93 eb 00 	sts	0x00EB, r24
						}
					}

					Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1132:	10 92 e9 00 	sts	0x00E9, r1
					Endpoint_ClearSetupReceived();
    1136:	80 91 e8 00 	lds	r24, 0x00E8
    113a:	87 7f       	andi	r24, 0xF7	; 247
    113c:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_ClearSetupIN();
    1140:	80 91 e8 00 	lds	r24, 0x00E8
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	a8 c0       	rjmp	.+336    	; 0x1298 <USB_Device_ProcessControlPacket+0x296>
			}

			break;
#endif
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1148:	66 23       	and	r22, r22
    114a:	09 f0       	breq	.+2      	; 0x114e <USB_Device_ProcessControlPacket+0x14c>
    114c:	cf c0       	rjmp	.+414    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
		/* Inline Functions: */
			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    114e:	90 91 f1 00 	lds	r25, 0x00F1

static void USB_Device_SetAddress(void)
{
	uint8_t wValue_LSB = Endpoint_Read_Byte();

	Endpoint_ClearSetupReceived();
    1152:	80 91 e8 00 	lds	r24, 0x00E8
    1156:	87 7f       	andi	r24, 0xF7	; 247
    1158:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsSetupINReady()));
    115c:	80 91 e8 00 	lds	r24, 0x00E8
    1160:	80 ff       	sbrs	r24, 0
    1162:	fc cf       	rjmp	.-8      	; 0x115c <USB_Device_ProcessControlPacket+0x15a>
	
	Endpoint_ClearSetupIN();
    1164:	80 91 e8 00 	lds	r24, 0x00E8
    1168:	8e 7f       	andi	r24, 0xFE	; 254
    116a:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsSetupINReady()));
    116e:	80 91 e8 00 	lds	r24, 0x00E8
    1172:	80 ff       	sbrs	r24, 0
    1174:	fc cf       	rjmp	.-8      	; 0x116e <USB_Device_ProcessControlPacket+0x16c>

	UDADDR = ((1 << ADDEN) | (wValue_LSB & 0x7F));
    1176:	90 68       	ori	r25, 0x80	; 128
    1178:	90 93 e3 00 	sts	0x00E3, r25
    117c:	b9 c0       	rjmp	.+370    	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    117e:	86 2f       	mov	r24, r22
    1180:	80 58       	subi	r24, 0x80	; 128
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	08 f0       	brcs	.+2      	; 0x1188 <USB_Device_ProcessControlPacket+0x186>
    1186:	b2 c0       	rjmp	.+356    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
    1188:	40 91 f1 00 	lds	r20, 0x00F1
				Data |= (((uint16_t)UEDATX) << 8);
    118c:	60 91 f1 00 	lds	r22, 0x00F1
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
    1190:	20 91 f1 00 	lds	r18, 0x00F1
				Data |= (((uint16_t)UEDATX) << 8);
    1194:	e0 91 f1 00 	lds	r30, 0x00F1
			static inline uint16_t Endpoint_Read_Word_LE(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t Endpoint_Read_Word_LE(void)
			{
				uint16_t Data;
				
				Data  = UEDATX;
    1198:	00 91 f1 00 	lds	r16, 0x00F1
				Data |= (((uint16_t)UEDATX) << 8);
    119c:	10 91 f1 00 	lds	r17, 0x00F1
	void*    DescriptorPointer;
	uint16_t DescriptorSize;
	
	bool     SendZLP;
	
	if ((DescriptorSize = USB_GetDescriptor(wValue, wIndex, &DescriptorPointer)) == NO_DESCRIPTOR)
    11a0:	96 2f       	mov	r25, r22
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	7e 2f       	mov	r23, r30
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	62 2b       	or	r22, r18
    11ae:	73 2b       	or	r23, r19
    11b0:	84 2b       	or	r24, r20
    11b2:	95 2b       	or	r25, r21
    11b4:	ae 01       	movw	r20, r28
    11b6:	4f 5f       	subi	r20, 0xFF	; 255
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	fa dc       	rcall	.-1548   	; 0xbb0 <USB_GetDescriptor>
    11bc:	ac 01       	movw	r20, r24
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <USB_Device_ProcessControlPacket+0x1c2>
    11c2:	96 c0       	rjmp	.+300    	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
	  return;
	
	Endpoint_ClearSetupReceived();
    11c4:	80 91 e8 00 	lds	r24, 0x00E8
    11c8:	87 7f       	andi	r24, 0xF7	; 247
    11ca:	80 93 e8 00 	sts	0x00E8, r24
    11ce:	91 2f       	mov	r25, r17
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	20 2f       	mov	r18, r16
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	28 2b       	or	r18, r24
    11d8:	39 2b       	or	r19, r25
    11da:	24 17       	cp	r18, r20
    11dc:	35 07       	cpc	r19, r21
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <USB_Device_ProcessControlPacket+0x1e0>
    11e0:	a9 01       	movw	r20, r18
				Endpoint_ClearSetupOUT();
				return;
			}		
		}
		
		while (wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    11e2:	80 91 0e 01 	lds	r24, 0x010E
    11e6:	a8 2f       	mov	r26, r24
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	69 81       	ldd	r22, Y+1	; 0x01
    11ec:	7a 81       	ldd	r23, Y+2	; 0x02
    11ee:	20 e0       	ldi	r18, 0x00	; 0
			#endif
			
			wLength--;
		}
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    11f0:	8d 01       	movw	r16, r26
    11f2:	27 c0       	rjmp	.+78     	; 0x1242 <USB_Device_ProcessControlPacket+0x240>
	
	while (wLength)
	{
		while (!(Endpoint_IsSetupINReady()))
		{
			if (Endpoint_IsSetupOUTReceived())
    11f4:	80 91 e8 00 	lds	r24, 0x00E8
    11f8:	82 fd       	sbrc	r24, 2
    11fa:	4b c0       	rjmp	.+150    	; 0x1292 <USB_Device_ProcessControlPacket+0x290>
	if (wLength > DescriptorSize)
	  wLength = DescriptorSize;
	
	while (wLength)
	{
		while (!(Endpoint_IsSetupINReady()))
    11fc:	80 91 e8 00 	lds	r24, 0x00E8
    1200:	80 ff       	sbrs	r24, 0
    1202:	f8 cf       	rjmp	.-16     	; 0x11f4 <USB_Device_ProcessControlPacket+0x1f2>
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <USB_Device_ProcessControlPacket+0x216>
    1206:	fb 01       	movw	r30, r22
    1208:	6f 5f       	subi	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
			#if defined(USE_RAM_DESCRIPTORS)
			Endpoint_Write_Byte(*((uint8_t*)DescriptorPointer++));
			#elif defined (USE_EEPROM_DESCRIPTORS)
			Endpoint_Write_Byte(eeprom_read_byte(DescriptorPointer++));			
			#else
			Endpoint_Write_Byte(pgm_read_byte(DescriptorPointer++));
    120c:	e4 91       	lpm	r30, Z+
			}

			/** Writes one byte from the currently selected endpoint's bank, for IN direction endpoints. */
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    120e:	e0 93 f1 00 	sts	0x00F1, r30
			#endif
			
			wLength--;
    1212:	41 50       	subi	r20, 0x01	; 1
    1214:	50 40       	sbci	r21, 0x00	; 0
				Endpoint_ClearSetupOUT();
				return;
			}		
		}
		
		while (wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
    1216:	39 f0       	breq	.+14     	; 0x1226 <USB_Device_ProcessControlPacket+0x224>
    1218:	80 91 f2 00 	lds	r24, 0x00F2
    121c:	90 91 f3 00 	lds	r25, 0x00F3
    1220:	8a 17       	cp	r24, r26
    1222:	9b 07       	cpc	r25, r27
    1224:	80 f3       	brcs	.-32     	; 0x1206 <USB_Device_ProcessControlPacket+0x204>
			#endif
			
			wLength--;
		}
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
    1226:	80 91 f2 00 	lds	r24, 0x00F2
    122a:	90 91 f3 00 	lds	r25, 0x00F3
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	80 17       	cp	r24, r16
    1232:	91 07       	cpc	r25, r17
    1234:	09 f4       	brne	.+2      	; 0x1238 <USB_Device_ProcessControlPacket+0x236>
    1236:	21 e0       	ldi	r18, 0x01	; 1
		Endpoint_ClearSetupIN();
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearSetupReceived();
	
	if (wLength > DescriptorSize)
	  wLength = DescriptorSize;
	
	while (wLength)
    1242:	41 15       	cp	r20, r1
    1244:	51 05       	cpc	r21, r1
    1246:	d1 f6       	brne	.-76     	; 0x11fc <USB_Device_ProcessControlPacket+0x1fa>
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
		Endpoint_ClearSetupIN();
	}
	
	if (SendZLP)
    1248:	22 23       	and	r18, r18
    124a:	49 f0       	breq	.+18     	; 0x125e <USB_Device_ProcessControlPacket+0x25c>
	{
		while (!(Endpoint_IsSetupINReady()));
    124c:	80 91 e8 00 	lds	r24, 0x00E8
    1250:	80 ff       	sbrs	r24, 0
    1252:	fc cf       	rjmp	.-8      	; 0x124c <USB_Device_ProcessControlPacket+0x24a>
		Endpoint_ClearSetupIN();
    1254:	80 91 e8 00 	lds	r24, 0x00E8
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	80 93 e8 00 	sts	0x00E8, r24
	}

	while (!(Endpoint_IsSetupOUTReceived()));
    125e:	80 91 e8 00 	lds	r24, 0x00E8
    1262:	82 ff       	sbrs	r24, 2
    1264:	fc cf       	rjmp	.-8      	; 0x125e <USB_Device_ProcessControlPacket+0x25c>
    1266:	15 c0       	rjmp	.+42     	; 0x1292 <USB_Device_ProcessControlPacket+0x290>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1268:	60 38       	cpi	r22, 0x80	; 128
    126a:	09 f0       	breq	.+2      	; 0x126e <USB_Device_ProcessControlPacket+0x26c>
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
	RAISE_EVENT(USB_ConfigurationChanged);
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSetupReceived();	
    126e:	80 91 e8 00 	lds	r24, 0x00E8
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    1278:	80 91 06 19 	lds	r24, 0x1906
    127c:	80 93 f1 00 	sts	0x00F1, r24
	
	Endpoint_ClearSetupIN();
    1280:	80 91 e8 00 	lds	r24, 0x00E8
    1284:	8e 7f       	andi	r24, 0xFE	; 254
    1286:	80 93 e8 00 	sts	0x00E8, r24

	while (!(Endpoint_IsSetupOUTReceived()));
    128a:	80 91 e8 00 	lds	r24, 0x00E8
    128e:	82 ff       	sbrs	r24, 2
    1290:	fc cf       	rjmp	.-8      	; 0x128a <USB_Device_ProcessControlPacket+0x288>
	Endpoint_ClearSetupOUT();
    1292:	80 91 e8 00 	lds	r24, 0x00E8
    1296:	8b 7f       	andi	r24, 0xFB	; 251
    1298:	80 93 e8 00 	sts	0x00E8, r24
    129c:	29 c0       	rjmp	.+82     	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    129e:	66 23       	and	r22, r22
    12a0:	29 f5       	brne	.+74     	; 0x12ec <USB_Device_ProcessControlPacket+0x2ea>
		/* Inline Functions: */
			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints. */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    12a2:	10 91 f1 00 	lds	r17, 0x00F1
}

static void USB_Device_SetConfiguration(void)
{
	uint8_t wValue_LSB        = Endpoint_Read_Byte();
	bool    AlreadyConfigured = (USB_ConfigurationNumber != 0);
    12a6:	00 91 06 19 	lds	r16, 0x1906
#if defined(USE_SINGLE_DEVICE_CONFIGURATION)
	if (wValue_LSB > 1)
#else
	USB_Descriptor_Device_t* DevDescriptorPtr;

	if ((USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr) == NO_DESCRIPTOR) ||
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	ae 01       	movw	r20, r28
    12b0:	4d 5f       	subi	r20, 0xFD	; 253
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	7d dc       	rcall	.-1798   	; 0xbb0 <USB_GetDescriptor>
    12b6:	89 2b       	or	r24, r25
    12b8:	d9 f0       	breq	.+54     	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
	#if defined(USE_RAM_DESCRIPTORS)
	    (wValue_LSB > DevDescriptorPtr->NumberOfConfigurations))
	#elif defined (USE_EEPROM_DESCRIPTORS)
	    (wValue_LSB > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
	#else
	    (wValue_LSB > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	71 96       	adiw	r30, 0x11	; 17
    12c0:	e4 91       	lpm	r30, Z+
#if defined(USE_SINGLE_DEVICE_CONFIGURATION)
	if (wValue_LSB > 1)
#else
	USB_Descriptor_Device_t* DevDescriptorPtr;

	if ((USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr) == NO_DESCRIPTOR) ||
    12c2:	e1 17       	cp	r30, r17
    12c4:	a8 f0       	brcs	.+42     	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>
#endif
	{
		return;
	}
	
	Endpoint_ClearSetupReceived();
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
    12ca:	87 7f       	andi	r24, 0xF7	; 247
    12cc:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = wValue_LSB;
    12d0:	10 93 06 19 	sts	0x1906, r17

	Endpoint_ClearSetupIN();
    12d4:	80 91 e8 00 	lds	r24, 0x00E8
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	80 93 e8 00 	sts	0x00E8, r24

	if (!(AlreadyConfigured) && USB_ConfigurationNumber)
    12de:	00 23       	and	r16, r16
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <USB_Device_ProcessControlPacket+0x2e6>
    12e2:	11 23       	and	r17, r17
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <USB_Device_ProcessControlPacket+0x2e6>
	  RAISE_EVENT(USB_DeviceEnumerationComplete);
    12e6:	0f d1       	rcall	.+542    	; 0x1506 <USB_Event_Stub>

	RAISE_EVENT(USB_ConfigurationChanged);
    12e8:	36 db       	rcall	.-2452   	; 0x956 <Event_USB_ConfigurationChanged>
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <USB_Device_ProcessControlPacket+0x2ee>

			break;
	}

	if (!(RequestHandled))
	  RAISE_EVENT(USB_UnhandledControlPacket, bRequest, bmRequestType);
    12ec:	85 2f       	mov	r24, r21
    12ee:	0b d1       	rcall	.+534    	; 0x1506 <USB_Event_Stub>
	  
	if (Endpoint_IsSetupReceived())
    12f0:	80 91 e8 00 	lds	r24, 0x00E8
    12f4:	83 ff       	sbrs	r24, 3
    12f6:	0a c0       	rjmp	.+20     	; 0x130c <USB_Device_ProcessControlPacket+0x30a>
	{
		Endpoint_StallTransaction();
    12f8:	80 91 eb 00 	lds	r24, 0x00EB
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSetupReceived();		
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    1306:	87 7f       	andi	r24, 0xF7	; 247
    1308:	80 93 e8 00 	sts	0x00E8, r24
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <USB_USBTask>:
#if defined(USB_CAN_BE_HOST)
volatile uint8_t   USB_HostState;
#endif

TASK(USB_USBTask)
{
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_IsConnected)
    1322:	80 91 08 19 	lds	r24, 0x1908
    1326:	88 23       	and	r24, r24
    1328:	79 f0       	breq	.+30     	; 0x1348 <USB_USBTask+0x2a>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    132a:	00 91 e9 00 	lds	r16, 0x00E9
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    132e:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSetupReceived())
    1332:	80 91 e8 00 	lds	r24, 0x00E8
    1336:	83 ff       	sbrs	r24, 3
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <USB_USBTask+0x24>
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    133a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    133c:	f8 94       	cli
			{
				USB_Device_ProcessControlPacket();
    133e:	61 de       	rcall	.-830    	; 0x1002 <USB_Device_ProcessControlPacket>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1340:	1f bf       	out	0x3f, r17	; 63
#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_IsConnected)
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    1342:	07 70       	andi	r16, 0x07	; 7
			{
				USB_Device_ProcessControlPacket();
			}
		}
		
		Endpoint_SelectEndpoint(PrevEndpoint);
    1344:	00 93 e9 00 	sts	0x00E9, r16
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_FULL_CONTROLLER)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
    134e:	e8 ed       	ldi	r30, 0xD8	; 216
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8c 7f       	andi	r24, 0xFC	; 252
    1356:	80 83       	st	Z, r24
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1358:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    135c:	08 95       	ret

0000135e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USBINT  = 0;
    135e:	10 92 da 00 	sts	0x00DA, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    1362:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1366:	08 95       	ret

00001368 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	0b b6       	in	r0, 0x3b	; 59
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	0f 93       	push	r16
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    1390:	80 91 da 00 	lds	r24, 0x00DA
    1394:	80 ff       	sbrs	r24, 0
    1396:	33 c0       	rjmp	.+102    	; 0x13fe <__vector_10+0x96>
    1398:	80 91 d8 00 	lds	r24, 0x00D8
    139c:	80 ff       	sbrs	r24, 0
    139e:	2f c0       	rjmp	.+94     	; 0x13fe <__vector_10+0x96>
	{
		USB_INT_Clear(USB_INT_VBUS);
    13a0:	80 91 da 00 	lds	r24, 0x00DA
    13a4:	8e 7f       	andi	r24, 0xFE	; 254
    13a6:	80 93 da 00 	sts	0x00DA, r24

		RAISE_EVENT(USB_VBUSChange);
    13aa:	ad d0       	rcall	.+346    	; 0x1506 <USB_Event_Stub>

		if (USB_VBUS_GetStatus())
    13ac:	80 91 d9 00 	lds	r24, 0x00D9
    13b0:	80 ff       	sbrs	r24, 0
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <__vector_10+0x64>
		{
			RAISE_EVENT(USB_VBUSConnect);
    13b4:	a8 d0       	rcall	.+336    	; 0x1506 <USB_Event_Stub>
			
			if (USB_IsConnected)
    13b6:	80 91 08 19 	lds	r24, 0x1908
    13ba:	88 23       	and	r24, r24
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_10+0x58>
			  RAISE_EVENT(USB_Disconnect);
    13be:	a3 d0       	rcall	.+326    	; 0x1506 <USB_Event_Stub>
				
			USB_ResetInterface();
    13c0:	4b dd       	rcall	.-1386   	; 0xe58 <USB_ResetInterface>
				
			USB_IsConnected = true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 08 19 	sts	0x1908, r24

			RAISE_EVENT(USB_Connect);
    13c8:	9e d0       	rcall	.+316    	; 0x1506 <USB_Event_Stub>
    13ca:	19 c0       	rjmp	.+50     	; 0x13fe <__vector_10+0x96>
		}
		else
		{
			RAISE_EVENT(USB_Disconnect);
    13cc:	9c d0       	rcall	.+312    	; 0x1506 <USB_Event_Stub>
		
			USB_Detach();
    13ce:	80 91 e0 00 	lds	r24, 0x00E0
    13d2:	81 60       	ori	r24, 0x01	; 1
    13d4:	80 93 e0 00 	sts	0x00E0, r24
			USB_CLK_Freeze();
    13d8:	80 91 d8 00 	lds	r24, 0x00D8
    13dc:	80 62       	ori	r24, 0x20	; 32
    13de:	80 93 d8 00 	sts	0x00D8, r24
			USB_PLL_Off();
    13e2:	19 bc       	out	0x29, r1	; 41
			USB_REG_Off();
    13e4:	80 91 d7 00 	lds	r24, 0x00D7
    13e8:	8e 7f       	andi	r24, 0xFE	; 254
    13ea:	80 93 d7 00 	sts	0x00D7, r24

			USB_IsConnected = false;
    13ee:	10 92 08 19 	sts	0x1908, r1

			RAISE_EVENT(USB_VBUSDisconnect);
    13f2:	89 d0       	rcall	.+274    	; 0x1506 <USB_Event_Stub>
			
			USB_INT_Clear(USB_INT_VBUS);
    13f4:	80 91 da 00 	lds	r24, 0x00DA
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	80 93 da 00 	sts	0x00DA, r24
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
    13fe:	80 91 e1 00 	lds	r24, 0x00E1
    1402:	80 ff       	sbrs	r24, 0
    1404:	1d c0       	rjmp	.+58     	; 0x1440 <__vector_10+0xd8>
    1406:	80 91 e2 00 	lds	r24, 0x00E2
    140a:	80 ff       	sbrs	r24, 0
    140c:	19 c0       	rjmp	.+50     	; 0x1440 <__vector_10+0xd8>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
    140e:	80 91 e1 00 	lds	r24, 0x00E1
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
    1418:	80 91 e2 00 	lds	r24, 0x00E2
    141c:	8e 7f       	andi	r24, 0xFE	; 254
    141e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    1422:	80 91 e2 00 	lds	r24, 0x00E2
    1426:	80 61       	ori	r24, 0x10	; 16
    1428:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
    142c:	80 91 d8 00 	lds	r24, 0x00D8
    1430:	80 62       	ori	r24, 0x20	; 32
    1432:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
    1436:	19 bc       	out	0x29, r1	; 41

		USB_IsSuspended = true;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 09 19 	sts	0x1909, r24

		RAISE_EVENT(USB_Suspend);
    143e:	63 d0       	rcall	.+198    	; 0x1506 <USB_Event_Stub>
			RAISE_EVENT(USB_Disconnect);
		}
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
    1440:	80 91 e1 00 	lds	r24, 0x00E1
    1444:	84 ff       	sbrs	r24, 4
    1446:	23 c0       	rjmp	.+70     	; 0x148e <__vector_10+0x126>
    1448:	80 91 e2 00 	lds	r24, 0x00E2
    144c:	84 ff       	sbrs	r24, 4
    144e:	1f c0       	rjmp	.+62     	; 0x148e <__vector_10+0x126>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
    1450:	84 e1       	ldi	r24, 0x14	; 20
    1452:	89 bd       	out	0x29, r24	; 41
    1454:	89 b5       	in	r24, 0x29	; 41
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
    145a:	09 b4       	in	r0, 0x29	; 41
    145c:	00 fe       	sbrs	r0, 0
    145e:	fd cf       	rjmp	.-6      	; 0x145a <__vector_10+0xf2>
		}

		USB_CLK_Unfreeze();
    1460:	80 91 d8 00 	lds	r24, 0x00D8
    1464:	8f 7d       	andi	r24, 0xDF	; 223
    1466:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
    146a:	80 91 e1 00 	lds	r24, 0x00E1
    146e:	8f 7e       	andi	r24, 0xEF	; 239
    1470:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
    1474:	80 91 e2 00 	lds	r24, 0x00E2
    1478:	8f 7e       	andi	r24, 0xEF	; 239
    147a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
    147e:	80 91 e2 00 	lds	r24, 0x00E2
    1482:	81 60       	ori	r24, 0x01	; 1
    1484:	80 93 e2 00 	sts	0x00E2, r24
			USB_IsConnected = true;
			RAISE_EVENT(USB_Connect);
		}
		#endif

		USB_IsSuspended = false;
    1488:	10 92 09 19 	sts	0x1909, r1

		RAISE_EVENT(USB_WakeUp);
    148c:	3c d0       	rcall	.+120    	; 0x1506 <USB_Event_Stub>
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    148e:	80 91 e1 00 	lds	r24, 0x00E1
    1492:	83 ff       	sbrs	r24, 3
    1494:	24 c0       	rjmp	.+72     	; 0x14de <__vector_10+0x176>
    1496:	80 91 e2 00 	lds	r24, 0x00E2
    149a:	83 ff       	sbrs	r24, 3
    149c:	20 c0       	rjmp	.+64     	; 0x14de <__vector_10+0x176>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    149e:	80 91 e1 00 	lds	r24, 0x00E1
    14a2:	87 7f       	andi	r24, 0xF7	; 247
    14a4:	80 93 e1 00 	sts	0x00E1, r24

		USB_ConfigurationNumber = 0;
    14a8:	10 92 06 19 	sts	0x1906, r1

		USB_INT_Clear(USB_INT_SUSPEND);
    14ac:	80 91 e1 00 	lds	r24, 0x00E1
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
    14b6:	80 91 e2 00 	lds	r24, 0x00E2
    14ba:	8e 7f       	andi	r24, 0xFE	; 254
    14bc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    14c0:	80 91 e2 00 	lds	r24, 0x00E2
    14c4:	80 61       	ori	r24, 0x10	; 16
    14c6:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
    14ca:	84 dd       	rcall	.-1272   	; 0xfd4 <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    14cc:	20 91 0e 01 	lds	r18, 0x010E
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	00 e0       	ldi	r16, 0x00	; 0
    14da:	46 dd       	rcall	.-1396   	; 0xf68 <Endpoint_ConfigureEndpoint>
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		RAISE_EVENT(USB_Reset);
    14dc:	14 d0       	rcall	.+40     	; 0x1506 <USB_Event_Stub>
		RAISE_EVENT(USB_UIDChange);
		
		USB_ResetInterface();
	}
	#endif
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 91       	pop	r16
    14f8:	0f 90       	pop	r0
    14fa:	0b be       	out	0x3b, r0	; 59
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1506:	08 95       	ret

00001508 <vfprintf>:
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2b 97       	sbiw	r28, 0x0b	; 11
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	5c 01       	movw	r10, r24
    1536:	4b 01       	movw	r8, r22
    1538:	7a 01       	movw	r14, r20
    153a:	fc 01       	movw	r30, r24
    153c:	17 82       	std	Z+7, r1	; 0x07
    153e:	16 82       	std	Z+6, r1	; 0x06
    1540:	83 81       	ldd	r24, Z+3	; 0x03
    1542:	81 fd       	sbrc	r24, 1
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <vfprintf+0x4e>
    1546:	6f ef       	ldi	r22, 0xFF	; 255
    1548:	7f ef       	ldi	r23, 0xFF	; 255
    154a:	fe c0       	rjmp	.+508    	; 0x1748 <vfprintf+0x240>
    154c:	42 e0       	ldi	r20, 0x02	; 2
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	e4 0e       	add	r14, r20
    1552:	f5 1e       	adc	r15, r21
    1554:	04 c0       	rjmp	.+8      	; 0x155e <vfprintf+0x56>
    1556:	3e 01       	movw	r6, r28
    1558:	08 94       	sec
    155a:	61 1c       	adc	r6, r1
    155c:	71 1c       	adc	r7, r1
    155e:	f5 01       	movw	r30, r10
    1560:	d3 80       	ldd	r13, Z+3	; 0x03
    1562:	f4 01       	movw	r30, r8
    1564:	d3 fc       	sbrc	r13, 3
    1566:	85 91       	lpm	r24, Z+
    1568:	d3 fe       	sbrs	r13, 3
    156a:	81 91       	ld	r24, Z+
    156c:	4f 01       	movw	r8, r30
    156e:	88 23       	and	r24, r24
    1570:	09 f4       	brne	.+2      	; 0x1574 <vfprintf+0x6c>
    1572:	e7 c0       	rjmp	.+462    	; 0x1742 <vfprintf+0x23a>
    1574:	85 32       	cpi	r24, 0x25	; 37
    1576:	59 f4       	brne	.+22     	; 0x158e <vfprintf+0x86>
    1578:	d3 fc       	sbrc	r13, 3
    157a:	65 91       	lpm	r22, Z+
    157c:	d3 fe       	sbrs	r13, 3
    157e:	61 91       	ld	r22, Z+
    1580:	4f 01       	movw	r8, r30
    1582:	65 32       	cpi	r22, 0x25	; 37
    1584:	19 f0       	breq	.+6      	; 0x158c <vfprintf+0x84>
    1586:	06 2f       	mov	r16, r22
    1588:	10 e0       	ldi	r17, 0x00	; 0
    158a:	1a c0       	rjmp	.+52     	; 0x15c0 <vfprintf+0xb8>
    158c:	85 e2       	ldi	r24, 0x25	; 37
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	29 c0       	rjmp	.+82     	; 0x15e4 <vfprintf+0xdc>
    1592:	00 23       	and	r16, r16
    1594:	09 f4       	brne	.+2      	; 0x1598 <vfprintf+0x90>
    1596:	d5 c0       	rjmp	.+426    	; 0x1742 <vfprintf+0x23a>
    1598:	82 e6       	ldi	r24, 0x62	; 98
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	60 2f       	mov	r22, r16
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	6e d1       	rcall	.+732    	; 0x187e <strchr_P>
    15a2:	89 2b       	or	r24, r25
    15a4:	39 f4       	brne	.+14     	; 0x15b4 <vfprintf+0xac>
    15a6:	03 32       	cpi	r16, 0x23	; 35
    15a8:	11 f4       	brne	.+4      	; 0x15ae <vfprintf+0xa6>
    15aa:	10 61       	ori	r17, 0x10	; 16
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <vfprintf+0xac>
    15ae:	0c 36       	cpi	r16, 0x6C	; 108
    15b0:	61 f4       	brne	.+24     	; 0x15ca <vfprintf+0xc2>
    15b2:	10 68       	ori	r17, 0x80	; 128
    15b4:	f4 01       	movw	r30, r8
    15b6:	d3 fc       	sbrc	r13, 3
    15b8:	05 91       	lpm	r16, Z+
    15ba:	d3 fe       	sbrs	r13, 3
    15bc:	01 91       	ld	r16, Z+
    15be:	4f 01       	movw	r8, r30
    15c0:	17 ff       	sbrs	r17, 7
    15c2:	e7 cf       	rjmp	.-50     	; 0x1592 <vfprintf+0x8a>
    15c4:	00 23       	and	r16, r16
    15c6:	09 f4       	brne	.+2      	; 0x15ca <vfprintf+0xc2>
    15c8:	bc c0       	rjmp	.+376    	; 0x1742 <vfprintf+0x23a>
    15ca:	8b e5       	ldi	r24, 0x5B	; 91
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	60 2f       	mov	r22, r16
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	55 d1       	rcall	.+682    	; 0x187e <strchr_P>
    15d4:	89 2b       	or	r24, r25
    15d6:	49 f0       	breq	.+18     	; 0x15ea <vfprintf+0xe2>
    15d8:	44 e0       	ldi	r20, 0x04	; 4
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	e4 0e       	add	r14, r20
    15de:	f5 1e       	adc	r15, r21
    15e0:	8f e3       	ldi	r24, 0x3F	; 63
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	b5 01       	movw	r22, r10
    15e6:	56 d1       	rcall	.+684    	; 0x1894 <fputc>
    15e8:	ba cf       	rjmp	.-140    	; 0x155e <vfprintf+0x56>
    15ea:	03 36       	cpi	r16, 0x63	; 99
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <vfprintf+0xf0>
    15ee:	03 37       	cpi	r16, 0x73	; 115
    15f0:	71 f0       	breq	.+28     	; 0x160e <vfprintf+0x106>
    15f2:	03 35       	cpi	r16, 0x53	; 83
    15f4:	e1 f4       	brne	.+56     	; 0x162e <vfprintf+0x126>
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <vfprintf+0x104>
    15f8:	87 01       	movw	r16, r14
    15fa:	0e 5f       	subi	r16, 0xFE	; 254
    15fc:	1f 4f       	sbci	r17, 0xFF	; 255
    15fe:	f7 01       	movw	r30, r14
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	b5 01       	movw	r22, r10
    1606:	46 d1       	rcall	.+652    	; 0x1894 <fputc>
    1608:	78 01       	movw	r14, r16
    160a:	a9 cf       	rjmp	.-174    	; 0x155e <vfprintf+0x56>
    160c:	11 60       	ori	r17, 0x01	; 1
    160e:	f7 01       	movw	r30, r14
    1610:	c0 80       	ld	r12, Z
    1612:	d1 80       	ldd	r13, Z+1	; 0x01
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x114>
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	b5 01       	movw	r22, r10
    161a:	3c d1       	rcall	.+632    	; 0x1894 <fputc>
    161c:	f6 01       	movw	r30, r12
    161e:	10 fd       	sbrc	r17, 0
    1620:	85 91       	lpm	r24, Z+
    1622:	10 ff       	sbrs	r17, 0
    1624:	81 91       	ld	r24, Z+
    1626:	6f 01       	movw	r12, r30
    1628:	88 23       	and	r24, r24
    162a:	a9 f7       	brne	.-22     	; 0x1616 <vfprintf+0x10e>
    162c:	8f cf       	rjmp	.-226    	; 0x154c <vfprintf+0x44>
    162e:	04 36       	cpi	r16, 0x64	; 100
    1630:	11 f0       	breq	.+4      	; 0x1636 <vfprintf+0x12e>
    1632:	09 36       	cpi	r16, 0x69	; 105
    1634:	39 f5       	brne	.+78     	; 0x1684 <vfprintf+0x17c>
    1636:	17 ff       	sbrs	r17, 7
    1638:	08 c0       	rjmp	.+16     	; 0x164a <vfprintf+0x142>
    163a:	f7 01       	movw	r30, r14
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	42 81       	ldd	r20, Z+2	; 0x02
    1642:	53 81       	ldd	r21, Z+3	; 0x03
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0a c0       	rjmp	.+20     	; 0x165e <vfprintf+0x156>
    164a:	f7 01       	movw	r30, r14
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	9c 01       	movw	r18, r24
    1652:	44 27       	eor	r20, r20
    1654:	37 fd       	sbrc	r19, 7
    1656:	40 95       	com	r20
    1658:	54 2f       	mov	r21, r20
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	e8 0e       	add	r14, r24
    1660:	f9 1e       	adc	r15, r25
    1662:	1f 7e       	andi	r17, 0xEF	; 239
    1664:	57 ff       	sbrs	r21, 7
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <vfprintf+0x170>
    1668:	50 95       	com	r21
    166a:	40 95       	com	r20
    166c:	30 95       	com	r19
    166e:	21 95       	neg	r18
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	4f 4f       	sbci	r20, 0xFF	; 255
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	10 64       	ori	r17, 0x40	; 64
    1678:	ca 01       	movw	r24, r20
    167a:	b9 01       	movw	r22, r18
    167c:	a3 01       	movw	r20, r6
    167e:	2a e0       	ldi	r18, 0x0A	; 10
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	34 c0       	rjmp	.+104    	; 0x16ec <vfprintf+0x1e4>
    1684:	00 37       	cpi	r16, 0x70	; 112
    1686:	a9 f0       	breq	.+42     	; 0x16b2 <vfprintf+0x1aa>
    1688:	01 37       	cpi	r16, 0x71	; 113
    168a:	30 f4       	brcc	.+12     	; 0x1698 <vfprintf+0x190>
    168c:	08 35       	cpi	r16, 0x58	; 88
    168e:	b1 f0       	breq	.+44     	; 0x16bc <vfprintf+0x1b4>
    1690:	0f 36       	cpi	r16, 0x6F	; 111
    1692:	09 f0       	breq	.+2      	; 0x1696 <vfprintf+0x18e>
    1694:	56 c0       	rjmp	.+172    	; 0x1742 <vfprintf+0x23a>
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0x19c>
    1698:	05 37       	cpi	r16, 0x75	; 117
    169a:	39 f0       	breq	.+14     	; 0x16aa <vfprintf+0x1a2>
    169c:	08 37       	cpi	r16, 0x78	; 120
    169e:	09 f0       	breq	.+2      	; 0x16a2 <vfprintf+0x19a>
    16a0:	50 c0       	rjmp	.+160    	; 0x1742 <vfprintf+0x23a>
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <vfprintf+0x1ac>
    16a4:	28 e0       	ldi	r18, 0x08	; 8
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	0c c0       	rjmp	.+24     	; 0x16c2 <vfprintf+0x1ba>
    16aa:	1f 7e       	andi	r17, 0xEF	; 239
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <vfprintf+0x1ba>
    16b2:	10 61       	ori	r17, 0x10	; 16
    16b4:	14 62       	ori	r17, 0x24	; 36
    16b6:	20 e1       	ldi	r18, 0x10	; 16
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <vfprintf+0x1ba>
    16bc:	14 60       	ori	r17, 0x04	; 4
    16be:	20 e1       	ldi	r18, 0x10	; 16
    16c0:	32 e0       	ldi	r19, 0x02	; 2
    16c2:	17 ff       	sbrs	r17, 7
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <vfprintf+0x1ce>
    16c6:	f7 01       	movw	r30, r14
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	44 e0       	ldi	r20, 0x04	; 4
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <vfprintf+0x1de>
    16d6:	f7 01       	movw	r30, r14
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	bc 01       	movw	r22, r24
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	e4 0e       	add	r14, r20
    16e8:	f5 1e       	adc	r15, r21
    16ea:	a3 01       	movw	r20, r6
    16ec:	ff d0       	rcall	.+510    	; 0x18ec <__ultoa_invert>
    16ee:	d8 2e       	mov	r13, r24
    16f0:	d6 18       	sub	r13, r6
    16f2:	01 2f       	mov	r16, r17
    16f4:	10 e0       	ldi	r17, 0x00	; 0
    16f6:	06 ff       	sbrs	r16, 6
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <vfprintf+0x1fa>
    16fa:	8d e2       	ldi	r24, 0x2D	; 45
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	b5 01       	movw	r22, r10
    1700:	c9 d0       	rcall	.+402    	; 0x1894 <fputc>
    1702:	04 ff       	sbrs	r16, 4
    1704:	13 c0       	rjmp	.+38     	; 0x172c <vfprintf+0x224>
    1706:	fe 01       	movw	r30, r28
    1708:	ed 0d       	add	r30, r13
    170a:	f1 1d       	adc	r31, r1
    170c:	80 81       	ld	r24, Z
    170e:	80 33       	cpi	r24, 0x30	; 48
    1710:	69 f0       	breq	.+26     	; 0x172c <vfprintf+0x224>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b5 01       	movw	r22, r10
    1718:	bd d0       	rcall	.+378    	; 0x1894 <fputc>
    171a:	02 ff       	sbrs	r16, 2
    171c:	07 c0       	rjmp	.+14     	; 0x172c <vfprintf+0x224>
    171e:	00 72       	andi	r16, 0x20	; 32
    1720:	10 70       	andi	r17, 0x00	; 0
    1722:	c8 01       	movw	r24, r16
    1724:	88 5a       	subi	r24, 0xA8	; 168
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	b5 01       	movw	r22, r10
    172a:	b4 d0       	rcall	.+360    	; 0x1894 <fputc>
    172c:	da 94       	dec	r13
    172e:	f3 01       	movw	r30, r6
    1730:	ed 0d       	add	r30, r13
    1732:	f1 1d       	adc	r31, r1
    1734:	80 81       	ld	r24, Z
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	b5 01       	movw	r22, r10
    173a:	ac d0       	rcall	.+344    	; 0x1894 <fputc>
    173c:	dd 20       	and	r13, r13
    173e:	b1 f7       	brne	.-20     	; 0x172c <vfprintf+0x224>
    1740:	0e cf       	rjmp	.-484    	; 0x155e <vfprintf+0x56>
    1742:	f5 01       	movw	r30, r10
    1744:	66 81       	ldd	r22, Z+6	; 0x06
    1746:	77 81       	ldd	r23, Z+7	; 0x07
    1748:	cb 01       	movw	r24, r22
    174a:	2b 96       	adiw	r28, 0x0b	; 11
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	bf 90       	pop	r11
    1768:	af 90       	pop	r10
    176a:	9f 90       	pop	r9
    176c:	8f 90       	pop	r8
    176e:	7f 90       	pop	r7
    1770:	6f 90       	pop	r6
    1772:	08 95       	ret

00001774 <__udivmodsi4>:
    1774:	a1 e2       	ldi	r26, 0x21	; 33
    1776:	1a 2e       	mov	r1, r26
    1778:	aa 1b       	sub	r26, r26
    177a:	bb 1b       	sub	r27, r27
    177c:	fd 01       	movw	r30, r26
    177e:	0d c0       	rjmp	.+26     	; 0x179a <__udivmodsi4_ep>

00001780 <__udivmodsi4_loop>:
    1780:	aa 1f       	adc	r26, r26
    1782:	bb 1f       	adc	r27, r27
    1784:	ee 1f       	adc	r30, r30
    1786:	ff 1f       	adc	r31, r31
    1788:	a2 17       	cp	r26, r18
    178a:	b3 07       	cpc	r27, r19
    178c:	e4 07       	cpc	r30, r20
    178e:	f5 07       	cpc	r31, r21
    1790:	20 f0       	brcs	.+8      	; 0x179a <__udivmodsi4_ep>
    1792:	a2 1b       	sub	r26, r18
    1794:	b3 0b       	sbc	r27, r19
    1796:	e4 0b       	sbc	r30, r20
    1798:	f5 0b       	sbc	r31, r21

0000179a <__udivmodsi4_ep>:
    179a:	66 1f       	adc	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	88 1f       	adc	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	1a 94       	dec	r1
    17a4:	69 f7       	brne	.-38     	; 0x1780 <__udivmodsi4_loop>
    17a6:	60 95       	com	r22
    17a8:	70 95       	com	r23
    17aa:	80 95       	com	r24
    17ac:	90 95       	com	r25
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	bd 01       	movw	r22, r26
    17b4:	cf 01       	movw	r24, r30
    17b6:	08 95       	ret

000017b8 <do_rand>:
    17b8:	af 92       	push	r10
    17ba:	bf 92       	push	r11
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	ec 01       	movw	r28, r24
    17ce:	a8 80       	ld	r10, Y
    17d0:	b9 80       	ldd	r11, Y+1	; 0x01
    17d2:	ca 80       	ldd	r12, Y+2	; 0x02
    17d4:	db 80       	ldd	r13, Y+3	; 0x03
    17d6:	a1 14       	cp	r10, r1
    17d8:	b1 04       	cpc	r11, r1
    17da:	c1 04       	cpc	r12, r1
    17dc:	d1 04       	cpc	r13, r1
    17de:	41 f4       	brne	.+16     	; 0x17f0 <do_rand+0x38>
    17e0:	84 e2       	ldi	r24, 0x24	; 36
    17e2:	a8 2e       	mov	r10, r24
    17e4:	89 ed       	ldi	r24, 0xD9	; 217
    17e6:	b8 2e       	mov	r11, r24
    17e8:	8b e5       	ldi	r24, 0x5B	; 91
    17ea:	c8 2e       	mov	r12, r24
    17ec:	87 e0       	ldi	r24, 0x07	; 7
    17ee:	d8 2e       	mov	r13, r24
    17f0:	c6 01       	movw	r24, r12
    17f2:	b5 01       	movw	r22, r10
    17f4:	2d e1       	ldi	r18, 0x1D	; 29
    17f6:	33 ef       	ldi	r19, 0xF3	; 243
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	f4 d0       	rcall	.+488    	; 0x19e6 <__divmodsi4>
    17fe:	27 ea       	ldi	r18, 0xA7	; 167
    1800:	31 e4       	ldi	r19, 0x41	; 65
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	d0 d0       	rcall	.+416    	; 0x19a8 <__mulsi3>
    1808:	7b 01       	movw	r14, r22
    180a:	8c 01       	movw	r16, r24
    180c:	c6 01       	movw	r24, r12
    180e:	b5 01       	movw	r22, r10
    1810:	2d e1       	ldi	r18, 0x1D	; 29
    1812:	33 ef       	ldi	r19, 0xF3	; 243
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	e6 d0       	rcall	.+460    	; 0x19e6 <__divmodsi4>
    181a:	ca 01       	movw	r24, r20
    181c:	b9 01       	movw	r22, r18
    181e:	2c ee       	ldi	r18, 0xEC	; 236
    1820:	34 ef       	ldi	r19, 0xF4	; 244
    1822:	4f ef       	ldi	r20, 0xFF	; 255
    1824:	5f ef       	ldi	r21, 0xFF	; 255
    1826:	c0 d0       	rcall	.+384    	; 0x19a8 <__mulsi3>
    1828:	6e 0d       	add	r22, r14
    182a:	7f 1d       	adc	r23, r15
    182c:	80 1f       	adc	r24, r16
    182e:	91 1f       	adc	r25, r17
    1830:	97 ff       	sbrs	r25, 7
    1832:	04 c0       	rjmp	.+8      	; 0x183c <do_rand+0x84>
    1834:	61 50       	subi	r22, 0x01	; 1
    1836:	70 40       	sbci	r23, 0x00	; 0
    1838:	80 40       	sbci	r24, 0x00	; 0
    183a:	90 48       	sbci	r25, 0x80	; 128
    183c:	68 83       	st	Y, r22
    183e:	79 83       	std	Y+1, r23	; 0x01
    1840:	8a 83       	std	Y+2, r24	; 0x02
    1842:	9b 83       	std	Y+3, r25	; 0x03
    1844:	9b 01       	movw	r18, r22
    1846:	3f 77       	andi	r19, 0x7F	; 127
    1848:	c9 01       	movw	r24, r18
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	08 95       	ret

00001860 <rand_r>:
    1860:	ab cf       	rjmp	.-170    	; 0x17b8 <do_rand>

00001862 <rand>:
    1862:	8f e0       	ldi	r24, 0x0F	; 15
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	a8 cf       	rjmp	.-176    	; 0x17b8 <do_rand>

00001868 <srand>:
    1868:	a0 e0       	ldi	r26, 0x00	; 0
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	80 93 0f 01 	sts	0x010F, r24
    1870:	90 93 10 01 	sts	0x0110, r25
    1874:	a0 93 11 01 	sts	0x0111, r26
    1878:	b0 93 12 01 	sts	0x0112, r27
    187c:	08 95       	ret

0000187e <strchr_P>:
    187e:	fc 01       	movw	r30, r24
    1880:	05 90       	lpm	r0, Z+
    1882:	06 16       	cp	r0, r22
    1884:	21 f0       	breq	.+8      	; 0x188e <strchr_P+0x10>
    1886:	00 20       	and	r0, r0
    1888:	d9 f7       	brne	.-10     	; 0x1880 <strchr_P+0x2>
    188a:	c0 01       	movw	r24, r0
    188c:	08 95       	ret
    188e:	31 97       	sbiw	r30, 0x01	; 1
    1890:	cf 01       	movw	r24, r30
    1892:	08 95       	ret

00001894 <fputc>:
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	8c 01       	movw	r16, r24
    189e:	eb 01       	movw	r28, r22
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	81 ff       	sbrs	r24, 1
    18a4:	1b c0       	rjmp	.+54     	; 0x18dc <fputc+0x48>
    18a6:	82 ff       	sbrs	r24, 2
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <fputc+0x30>
    18aa:	2e 81       	ldd	r18, Y+6	; 0x06
    18ac:	3f 81       	ldd	r19, Y+7	; 0x07
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	28 17       	cp	r18, r24
    18b4:	39 07       	cpc	r19, r25
    18b6:	64 f4       	brge	.+24     	; 0x18d0 <fputc+0x3c>
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	01 93       	st	Z+, r16
    18be:	f9 83       	std	Y+1, r31	; 0x01
    18c0:	e8 83       	st	Y, r30
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <fputc+0x3c>
    18c4:	e8 85       	ldd	r30, Y+8	; 0x08
    18c6:	f9 85       	ldd	r31, Y+9	; 0x09
    18c8:	80 2f       	mov	r24, r16
    18ca:	09 95       	icall
    18cc:	89 2b       	or	r24, r25
    18ce:	31 f4       	brne	.+12     	; 0x18dc <fputc+0x48>
    18d0:	8e 81       	ldd	r24, Y+6	; 0x06
    18d2:	9f 81       	ldd	r25, Y+7	; 0x07
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	9f 83       	std	Y+7, r25	; 0x07
    18d8:	8e 83       	std	Y+6, r24	; 0x06
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <fputc+0x4c>
    18dc:	0f ef       	ldi	r16, 0xFF	; 255
    18de:	1f ef       	ldi	r17, 0xFF	; 255
    18e0:	c8 01       	movw	r24, r16
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <__ultoa_invert>:
    18ec:	fa 01       	movw	r30, r20
    18ee:	aa 27       	eor	r26, r26
    18f0:	28 30       	cpi	r18, 0x08	; 8
    18f2:	51 f1       	breq	.+84     	; 0x1948 <__ultoa_invert+0x5c>
    18f4:	20 31       	cpi	r18, 0x10	; 16
    18f6:	81 f1       	breq	.+96     	; 0x1958 <__ultoa_invert+0x6c>
    18f8:	e8 94       	clt
    18fa:	6f 93       	push	r22
    18fc:	6e 7f       	andi	r22, 0xFE	; 254
    18fe:	6e 5f       	subi	r22, 0xFE	; 254
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	af 4f       	sbci	r26, 0xFF	; 255
    1908:	b1 e0       	ldi	r27, 0x01	; 1
    190a:	3e d0       	rcall	.+124    	; 0x1988 <__ultoa_invert+0x9c>
    190c:	b4 e0       	ldi	r27, 0x04	; 4
    190e:	3c d0       	rcall	.+120    	; 0x1988 <__ultoa_invert+0x9c>
    1910:	67 0f       	add	r22, r23
    1912:	78 1f       	adc	r23, r24
    1914:	89 1f       	adc	r24, r25
    1916:	9a 1f       	adc	r25, r26
    1918:	a1 1d       	adc	r26, r1
    191a:	68 0f       	add	r22, r24
    191c:	79 1f       	adc	r23, r25
    191e:	8a 1f       	adc	r24, r26
    1920:	91 1d       	adc	r25, r1
    1922:	a1 1d       	adc	r26, r1
    1924:	6a 0f       	add	r22, r26
    1926:	71 1d       	adc	r23, r1
    1928:	81 1d       	adc	r24, r1
    192a:	91 1d       	adc	r25, r1
    192c:	a1 1d       	adc	r26, r1
    192e:	20 d0       	rcall	.+64     	; 0x1970 <__ultoa_invert+0x84>
    1930:	09 f4       	brne	.+2      	; 0x1934 <__ultoa_invert+0x48>
    1932:	68 94       	set
    1934:	3f 91       	pop	r19
    1936:	2a e0       	ldi	r18, 0x0A	; 10
    1938:	26 9f       	mul	r18, r22
    193a:	11 24       	eor	r1, r1
    193c:	30 19       	sub	r19, r0
    193e:	30 5d       	subi	r19, 0xD0	; 208
    1940:	31 93       	st	Z+, r19
    1942:	de f6       	brtc	.-74     	; 0x18fa <__ultoa_invert+0xe>
    1944:	cf 01       	movw	r24, r30
    1946:	08 95       	ret
    1948:	46 2f       	mov	r20, r22
    194a:	47 70       	andi	r20, 0x07	; 7
    194c:	40 5d       	subi	r20, 0xD0	; 208
    194e:	41 93       	st	Z+, r20
    1950:	b3 e0       	ldi	r27, 0x03	; 3
    1952:	0f d0       	rcall	.+30     	; 0x1972 <__ultoa_invert+0x86>
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__ultoa_invert+0x5c>
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <__ultoa_invert+0x58>
    1958:	46 2f       	mov	r20, r22
    195a:	4f 70       	andi	r20, 0x0F	; 15
    195c:	40 5d       	subi	r20, 0xD0	; 208
    195e:	4a 33       	cpi	r20, 0x3A	; 58
    1960:	18 f0       	brcs	.+6      	; 0x1968 <__ultoa_invert+0x7c>
    1962:	49 5d       	subi	r20, 0xD9	; 217
    1964:	31 fd       	sbrc	r19, 1
    1966:	40 52       	subi	r20, 0x20	; 32
    1968:	41 93       	st	Z+, r20
    196a:	02 d0       	rcall	.+4      	; 0x1970 <__ultoa_invert+0x84>
    196c:	a9 f7       	brne	.-22     	; 0x1958 <__ultoa_invert+0x6c>
    196e:	ea cf       	rjmp	.-44     	; 0x1944 <__ultoa_invert+0x58>
    1970:	b4 e0       	ldi	r27, 0x04	; 4
    1972:	a6 95       	lsr	r26
    1974:	97 95       	ror	r25
    1976:	87 95       	ror	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0x86>
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	61 05       	cpc	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	08 95       	ret
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	0a 2e       	mov	r0, r26
    198e:	06 94       	lsr	r0
    1990:	57 95       	ror	r21
    1992:	47 95       	ror	r20
    1994:	37 95       	ror	r19
    1996:	27 95       	ror	r18
    1998:	ba 95       	dec	r27
    199a:	c9 f7       	brne	.-14     	; 0x198e <__ultoa_invert+0xa2>
    199c:	62 0f       	add	r22, r18
    199e:	73 1f       	adc	r23, r19
    19a0:	84 1f       	adc	r24, r20
    19a2:	95 1f       	adc	r25, r21
    19a4:	a0 1d       	adc	r26, r0
    19a6:	08 95       	ret

000019a8 <__mulsi3>:
    19a8:	62 9f       	mul	r22, r18
    19aa:	d0 01       	movw	r26, r0
    19ac:	73 9f       	mul	r23, r19
    19ae:	f0 01       	movw	r30, r0
    19b0:	82 9f       	mul	r24, r18
    19b2:	e0 0d       	add	r30, r0
    19b4:	f1 1d       	adc	r31, r1
    19b6:	64 9f       	mul	r22, r20
    19b8:	e0 0d       	add	r30, r0
    19ba:	f1 1d       	adc	r31, r1
    19bc:	92 9f       	mul	r25, r18
    19be:	f0 0d       	add	r31, r0
    19c0:	83 9f       	mul	r24, r19
    19c2:	f0 0d       	add	r31, r0
    19c4:	74 9f       	mul	r23, r20
    19c6:	f0 0d       	add	r31, r0
    19c8:	65 9f       	mul	r22, r21
    19ca:	f0 0d       	add	r31, r0
    19cc:	99 27       	eor	r25, r25
    19ce:	72 9f       	mul	r23, r18
    19d0:	b0 0d       	add	r27, r0
    19d2:	e1 1d       	adc	r30, r1
    19d4:	f9 1f       	adc	r31, r25
    19d6:	63 9f       	mul	r22, r19
    19d8:	b0 0d       	add	r27, r0
    19da:	e1 1d       	adc	r30, r1
    19dc:	f9 1f       	adc	r31, r25
    19de:	bd 01       	movw	r22, r26
    19e0:	cf 01       	movw	r24, r30
    19e2:	11 24       	eor	r1, r1
    19e4:	08 95       	ret

000019e6 <__divmodsi4>:
    19e6:	97 fb       	bst	r25, 7
    19e8:	09 2e       	mov	r0, r25
    19ea:	05 26       	eor	r0, r21
    19ec:	0e d0       	rcall	.+28     	; 0x1a0a <__divmodsi4_neg1>
    19ee:	57 fd       	sbrc	r21, 7
    19f0:	04 d0       	rcall	.+8      	; 0x19fa <__divmodsi4_neg2>
    19f2:	c0 de       	rcall	.-640    	; 0x1774 <__udivmodsi4>
    19f4:	0a d0       	rcall	.+20     	; 0x1a0a <__divmodsi4_neg1>
    19f6:	00 1c       	adc	r0, r0
    19f8:	38 f4       	brcc	.+14     	; 0x1a08 <__divmodsi4_exit>

000019fa <__divmodsi4_neg2>:
    19fa:	50 95       	com	r21
    19fc:	40 95       	com	r20
    19fe:	30 95       	com	r19
    1a00:	21 95       	neg	r18
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	4f 4f       	sbci	r20, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255

00001a08 <__divmodsi4_exit>:
    1a08:	08 95       	ret

00001a0a <__divmodsi4_neg1>:
    1a0a:	f6 f7       	brtc	.-4      	; 0x1a08 <__divmodsi4_exit>
    1a0c:	90 95       	com	r25
    1a0e:	80 95       	com	r24
    1a10:	70 95       	com	r23
    1a12:	61 95       	neg	r22
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <_exit>:
    1a1c:	f8 94       	cli

00001a1e <__stop_program>:
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <__stop_program>
